<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>茗一的笔记</title>
  <subtitle>沉淀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mingyi.js.org/"/>
  <updated>2017-02-15T15:43:57.579Z</updated>
  <id>http://mingyi.js.org/</id>
  
  <author>
    <name>Mingyi Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeeCode303. Range Sum Query - Immutable</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode303-Range-Sum-Query-Immutable/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode303-Range-Sum-Query-Immutable/</id>
    <published>2017-02-15T23:42:20.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p>
<p>Example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Given nums = [<span class="number">-2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">-5</span>, <span class="number">2</span>, <span class="number">-1</span>]</div><div class="line"></div><div class="line">sumRange(<span class="number">0</span>, <span class="number">2</span>) -&gt; <span class="number">1</span></div><div class="line">sumRange(<span class="number">2</span>, <span class="number">5</span>) -&gt; <span class="number">-1</span></div><div class="line">sumRange(<span class="number">0</span>, <span class="number">5</span>) -&gt; <span class="number">-3</span></div></pre></td></tr></table></figure></p>
<p>Note:<br>You may assume that the array does not change.<br>There are many calls to sumRange function.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> NumArray &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums) &#123;</div><div class="line">        m[<span class="number">-1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">            m[i] = m[i - <span class="number">1</span>] + nums[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> m[j] - m[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your NumArray object will be instantiated and called as such:</div><div class="line"> * NumArray obj = new NumArray(nums);</div><div class="line"> * int param_1 = obj.sumRange(i,j);</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;&lt;figure class=&quot;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeeCode263. Ugly Number</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode263-Ugly-Number/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode263-Ugly-Number/</id>
    <published>2017-02-15T23:10:58.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Write a program to check whether a given number is an ugly number.</p>
<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</p>
<p>Note that 1 is typically treated as an ugly number.</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">public:</div><div class="line">    <span class="built_in">bool</span> isUgly(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">num</span> == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">num</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">num</span> % <span class="number">3</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">3</span>;</div><div class="line">        &#125; </div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">num</span> % <span class="number">5</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">5</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span> == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are positive numbers whose prime factors only incl
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode232. Implement Queue using Stacks</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode232-Implement-Queue-using-Stacks/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode232-Implement-Queue-using-Stacks/</id>
    <published>2017-02-15T22:47:05.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Implement the following operations of a queue using stacks.</p>
<p>push(x) – Push element x to the back of queue.<br>pop() – Removes the element from in front of queue.<br>peek() – Get the front element.<br>empty() – Return whether the queue is empty.<br>Notes:<br>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.<br>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.<br>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<h4 id="用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了"><a href="#用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了" class="headerlink" title="用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了"></a>用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">class MyQueue &#123;</div><div class="line"><span class="symbol">private:</span></div><div class="line">    stack&lt;int&gt; <span class="built_in">s1</span>, <span class="built_in">s2</span><span class="comment">;</span></div><div class="line"><span class="symbol">public:</span></div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    MyQueue() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Push element x to the back of queue. */</span></div><div class="line">    void push(int x) &#123;</div><div class="line">        <span class="built_in">s1</span>.push(x)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></div><div class="line">    int pop() &#123;</div><div class="line">        if (<span class="built_in">s2</span>.size() == <span class="number">0</span>) &#123;</div><div class="line">            while (<span class="built_in">s1</span>.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">s2</span>.push(<span class="built_in">s1</span>.top())<span class="comment">;</span></div><div class="line">                <span class="built_in">s1</span>.pop()<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        int front = <span class="built_in">s2</span>.top()<span class="comment">;</span></div><div class="line">        <span class="built_in">s2</span>.pop()<span class="comment">;</span></div><div class="line">        return front<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the front element. */</span></div><div class="line">    int peek() &#123;</div><div class="line">        if (<span class="built_in">s2</span>.size() == <span class="number">0</span>) &#123;</div><div class="line">            while (<span class="built_in">s1</span>.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">s2</span>.push(<span class="built_in">s1</span>.top())<span class="comment">;</span></div><div class="line">                <span class="built_in">s1</span>.pop()<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return <span class="built_in">s2</span>.top()<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></div><div class="line">    <span class="keyword">bool </span>empty() &#123;</div><div class="line">        return <span class="built_in">s1</span>.size() == <span class="number">0</span> &amp;&amp; <span class="built_in">s2</span>.size() == <span class="number">0</span><span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your MyQueue object will be instantiated and called as such:</div><div class="line"> * MyQueue obj = new MyQueue();</div><div class="line"> * obj.push(x);</div><div class="line"> * int param_2 = obj.pop();</div><div class="line"> * int param_3 = obj.peek();</div><div class="line"> * bool param_4 = obj.empty();</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement the following operations of a queue using stacks.&lt;/p&gt;
&lt;p&gt;push(x) – Push element x to the back of queue.&lt;br&gt;pop() – Removes the 
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode237. Delete Node in a Linked List</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode237-Delete-Node-in-a-Linked-List/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode237-Delete-Node-in-a-Linked-List/</id>
    <published>2017-02-15T18:47:40.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void deleteNode(ListNode* <span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">        ListNode* next = <span class="keyword">node</span><span class="title">-&gt;next</span>;</div><div class="line">        <span class="keyword">node</span><span class="title">-&gt;val</span> = next-&gt;val;</div><div class="line">        <span class="keyword">node</span><span class="title">-&gt;next</span> = next-&gt;next;</div><div class="line">        delete next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.&lt;/p&gt;
&lt;p&gt;Supposed the linked l
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode231. Power of Two</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode231-Power-of-Two/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode231-Power-of-Two/</id>
    <published>2017-02-15T17:42:12.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer, write a function to determine if it is a power of two.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> !(n &amp; (n - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an integer, write a function to determine if it is a power of two.&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode155. Min Stack</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode155-Min-Stack/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode155-Min-Stack/</id>
    <published>2017-02-15T17:26:11.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<p>push(x) – Push element x onto stack.<br>pop() – Removes the element on top of the stack.<br>top() – Get the top element.<br>getMin() – Retrieve the minimum element in the stack.<br>Example:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">M<span class="keyword">in</span>Stack <span class="keyword">min</span>Stack = new M<span class="keyword">in</span>Stack();</div><div class="line"><span class="keyword">min</span>Stack.push(-<span class="number">2</span>);</div><div class="line"><span class="keyword">min</span>Stack.push(<span class="number">0</span>);</div><div class="line"><span class="keyword">min</span>Stack.push(-<span class="number">3</span>);</div><div class="line"><span class="keyword">min</span>Stack.getM<span class="keyword">in</span>();   --&gt; Returns -<span class="number">3</span>.</div><div class="line"><span class="keyword">min</span>Stack.pop();</div><div class="line"><span class="keyword">min</span>Stack.top();      --&gt; Returns <span class="number">0</span>.</div><div class="line"><span class="keyword">min</span>Stack.getM<span class="keyword">in</span>();   --&gt; Returns -<span class="number">2</span>.</div></pre></td></tr></table></figure></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MinStack &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    stack&lt;<span class="keyword">int</span>&gt; s1, s2;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** initialize your data structure here. */</span></div><div class="line">    MinStack() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> <span class="keyword">push</span>(<span class="keyword">int</span> x) &#123;</div><div class="line">        s1.<span class="keyword">push</span>(x);</div><div class="line">        s2.<span class="keyword">push</span>(s2.<span class="keyword">size</span>() &gt; <span class="number">0</span> ? min(x, s2.top()) : x);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> <span class="keyword">pop</span>() &#123;</div><div class="line">        s1.<span class="keyword">pop</span>();</div><div class="line">        s2.<span class="keyword">pop</span>();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> top() &#123;</div><div class="line">        <span class="keyword">return</span> s1.top();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> getMin() &#123;</div><div class="line">        <span class="keyword">return</span> s2.top();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your MinStack object will be instantiated and called as such:</div><div class="line"> * MinStack obj = new MinStack();</div><div class="line"> * obj.push(x);</div><div class="line"> * obj.pop();</div><div class="line"> * int param_3 = obj.top();</div><div class="line"> * int param_4 = obj.getMin();</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.&lt;/p&gt;
&lt;p&gt;push(x) – Push element x onto st
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode234. Palindrome Linked List</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode234-Palindrome-Linked-List/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode234-Palindrome-Linked-List/</id>
    <published>2017-02-15T14:15:49.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a singly linked list, determine if it is a palindrome.</p>
<p>Follow up:<br>Could you do it in O(n) time and O(1) space?</p>
<h4 id="把前一半反转一下，然后用两个指针，将一个移到中间后，开始逐个看两个指针上的数据是否相等"><a href="#把前一半反转一下，然后用两个指针，将一个移到中间后，开始逐个看两个指针上的数据是否相等" class="headerlink" title="把前一半反转一下，然后用两个指针，将一个移到中间后，开始逐个看两个指针上的数据是否相等"></a>把前一半反转一下，然后用两个指针，将一个移到中间后，开始逐个看两个指针上的数据是否相等</h4><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode *<span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) : val(x), <span class="keyword">next</span>(<span class="literal">NULL</span>) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    bool isPalindrome(ListNode* head) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">len</span> = getLength(head);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">len</span> &lt; <span class="number">2</span>)</div><div class="line">            return <span class="literal">true</span>;</div><div class="line">        ListNode *p1 = head, *p2 = head;</div><div class="line">        bool result = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">int</span> i = <span class="number">0</span>, <span class="built_in">mid</span> = (<span class="built_in">len</span> - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">        </div><div class="line">        ListNode *reverseStart = head, *reverseEnd;</div><div class="line">        <span class="keyword">while</span> (p1 &amp;&amp; p2) &#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="built_in">len</span> % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; i == <span class="built_in">mid</span>) || (<span class="built_in">len</span> % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; i == <span class="built_in">mid</span> - <span class="number">1</span>)) &#123;</div><div class="line">                reverseEnd = p2;</div><div class="line">                p2 = p2-&gt;<span class="keyword">next</span>;</div><div class="line">                i++;</div><div class="line">                p1 = reverse(reverseStart, reverseEnd);</div><div class="line">            &#125;</div><div class="line">                </div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="built_in">mid</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (p1-&gt;val != p2-&gt;val) &#123;</div><div class="line">                    result = <span class="literal">false</span>;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                p1 = p1-&gt;<span class="keyword">next</span>;</div><div class="line">                p2 = p2-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                p2 = p2-&gt;<span class="keyword">next</span>;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        head = reverse(reverseEnd, reverseStart);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ListNode* reverse(ListNode* start, ListNode* <span class="keyword">end</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (start == <span class="keyword">end</span>) &#123;</div><div class="line">            return start;</div><div class="line">        &#125;</div><div class="line">        ListNode *cur = start, *<span class="keyword">next</span> = cur-&gt;<span class="keyword">next</span>, *tmp;</div><div class="line">        <span class="keyword">while</span> (cur != <span class="keyword">end</span>) &#123;</div><div class="line">            tmp = <span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">            <span class="keyword">next</span>-&gt;<span class="keyword">next</span> = cur;</div><div class="line">            cur = <span class="keyword">next</span>;</div><div class="line">            <span class="keyword">next</span> = tmp;</div><div class="line">        &#125;</div><div class="line">        start-&gt;<span class="keyword">next</span> = <span class="keyword">next</span>;</div><div class="line">        return cur;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">int</span> getLength(ListNode* head) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">len</span> = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (head) &#123;</div><div class="line">            <span class="built_in">len</span>++;</div><div class="line">            head = head-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        return <span class="built_in">len</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a singly linked list, determine if it is a palindrome.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;Could you do it in O(n) time and O(1) space?&lt;/p&gt;
&lt;h4 id
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode141. Linked List Cycle</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode141-Linked-List-Cycle/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode141-Linked-List-Cycle/</id>
    <published>2017-02-15T00:29:00.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a linked list, determine if it has a cycle in it.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
<h4 id="一个笨办法是将每个节点插入一个unordered-map里，每次插入前去查一下是否已经存在，这个方法需要额外的存储空间；另一个方法是用两个指针遍历链表，一个指针每次走一步，另一个指针每次走两步，如果有环，这两个指针必定会相遇，具体代码如下"><a href="#一个笨办法是将每个节点插入一个unordered-map里，每次插入前去查一下是否已经存在，这个方法需要额外的存储空间；另一个方法是用两个指针遍历链表，一个指针每次走一步，另一个指针每次走两步，如果有环，这两个指针必定会相遇，具体代码如下" class="headerlink" title="一个笨办法是将每个节点插入一个unordered_map里，每次插入前去查一下是否已经存在，这个方法需要额外的存储空间；另一个方法是用两个指针遍历链表，一个指针每次走一步，另一个指针每次走两步，如果有环，这两个指针必定会相遇，具体代码如下"></a>一个笨办法是将每个节点插入一个unordered_map里，每次插入前去查一下是否已经存在，这个方法需要额外的存储空间；另一个方法是用两个指针遍历链表，一个指针每次走一步，另一个指针每次走两步，如果有环，这两个指针必定会相遇，具体代码如下</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="symbol">class</span> Solution &#123;</div><div class="line"><span class="symbol">public</span>:</div><div class="line">    <span class="keyword">bool </span>hasCycle(ListNode *head) &#123;</div><div class="line">        <span class="meta">if</span> (head == nullptr) </div><div class="line">            return false<span class="comment">;</span></div><div class="line">        ListNode *<span class="built_in">p1</span> = head, *<span class="built_in">p2</span> = head<span class="comment">;</span></div><div class="line">        <span class="keyword">bool </span>result = false<span class="comment">;</span></div><div class="line">        <span class="meta">while</span> (<span class="built_in">p1</span> &amp;&amp; <span class="built_in">p2</span>) &#123;</div><div class="line">            <span class="built_in">p1</span> = <span class="built_in">p1</span>-&gt;next<span class="comment">;</span></div><div class="line">            <span class="built_in">p2</span> = <span class="built_in">p2</span>-&gt;next<span class="comment">;</span></div><div class="line">            <span class="meta">if</span> (!<span class="built_in">p2</span>) &#123;</div><div class="line">                result = false<span class="comment">;</span></div><div class="line">                <span class="keyword">break;</span></div><div class="line">            &#125; <span class="meta">else</span> &#123;</div><div class="line">                <span class="built_in">p2</span> = <span class="built_in">p2</span>-&gt;next<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">if</span> (<span class="built_in">p1</span> == <span class="built_in">p2</span>) &#123;</div><div class="line">                result = true<span class="comment">;</span></div><div class="line">                <span class="keyword">break;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a linked list, determine if it has a cycle in it.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;Can you solve it without using extra space?&lt;/p&gt;
&lt;h4 id=&quot;一个笨办
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode136. Single Number</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode136-Single-Number/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode136-Single-Number/</id>
    <published>2017-02-15T00:08:52.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">            result ^= nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Your algorithm should have 
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode125. Valid Palindrome</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode125-Valid-Palindrome/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode125-Valid-Palindrome/</id>
    <published>2017-02-15T00:05:29.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
<p>Note:<br>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    bool isPalindrome(string s) &#123;</div><div class="line">        bool result = <span class="literal">true</span>;</div><div class="line">        int len = s.length(), idx = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        </div><div class="line">        char <span class="built_in">c</span>[len];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> ((s[i] &gt;= 'a' &amp;&amp; s[i] &lt;= 'z') || (s[i] &gt;= '<span class="type">A'</span> &amp;&amp; s[i] &lt;= '<span class="type">Z'</span>) || (s[i] &gt;= '<span class="number">0</span>' &amp;&amp; s[i] &lt;= '<span class="number">9</span>')) &#123;</div><div class="line">                <span class="built_in">c</span>[idx++] = s[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = idx - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!(<span class="built_in">c</span>[<span class="keyword">left</span>] - <span class="built_in">c</span>[<span class="keyword">right</span>] == <span class="number">0</span> || (<span class="built_in">c</span>[<span class="keyword">left</span>] &gt;= '<span class="type">A'</span> &amp;&amp; <span class="built_in">c</span>[<span class="keyword">left</span>] &lt;= 'z' &amp;&amp; <span class="built_in">c</span>[<span class="keyword">right</span>] &gt;= '<span class="type">A'</span> &amp;&amp; <span class="built_in">c</span>[<span class="keyword">right</span>] &lt;= 'z' &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">c</span>[<span class="keyword">left</span>] - <span class="built_in">c</span>[<span class="keyword">right</span>]) == 'a' - '<span class="type">A'</span>))) &#123;</div><div class="line">                result = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">left</span>++;</div><div class="line">                <span class="keyword">right</span>--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;“A m
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode110. Balanced Binary Tree</title>
    <link href="http://mingyi.js.org/2017/02/14/LeeCode110-Balanced-Binary-Tree/"/>
    <id>http://mingyi.js.org/2017/02/14/LeeCode110-Balanced-Binary-Tree/</id>
    <published>2017-02-14T23:31:42.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode *<span class="built_in">left</span>;</div><div class="line"> *     TreeNode *<span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) : val(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    bool isBalanced(TreeNode* root) &#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">            return <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (!isBalanced(root-&gt;<span class="built_in">left</span>) || !isBalanced(root-&gt;<span class="built_in">right</span>)) return <span class="literal">false</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">int</span> leftMaxDepth = maxDepth(root-&gt;<span class="built_in">left</span>);</div><div class="line">        <span class="built_in">int</span> rightMaxDepth = maxDepth(root-&gt;<span class="built_in">right</span>);</div><div class="line">        return <span class="built_in">abs</span>(leftMaxDepth - rightMaxDepth) &lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">int</span> maxDepth(TreeNode* root) &#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">            return <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> leftDepth = root-&gt;<span class="built_in">left</span> ? maxDepth(root-&gt;<span class="built_in">left</span>) : <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> rightDepth = root-&gt;<span class="built_in">right</span> ? maxDepth(root-&gt;<span class="built_in">right</span>) : <span class="number">0</span>;</div><div class="line">        return max(leftDepth, rightDepth) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a binary tree, determine if it is height-balanced.&lt;/p&gt;
&lt;p&gt;For this problem, a height-balanced binary tree is defined as a binary tr
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode104. Maximum Depth of Binary Tree</title>
    <link href="http://mingyi.js.org/2017/02/14/LeeCode104-Maximum-Depth-of-Binary-Tree/"/>
    <id>http://mingyi.js.org/2017/02/14/LeeCode104-Maximum-Depth-of-Binary-Tree/</id>
    <published>2017-02-14T22:56:02.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<p>递归求左右子树的高度取最大再加1即为所求</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode *<span class="built_in">left</span>;</div><div class="line"> *     TreeNode *<span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) : val(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">int</span> maxDepth(TreeNode* root) &#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">            return <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> leftHeight = root-&gt;<span class="built_in">left</span> ? maxDepth(root-&gt;<span class="built_in">left</span>) : <span class="number">0</span>, rightHeight = root-&gt;<span class="built_in">right</span> ? maxDepth(root-&gt;<span class="built_in">right</span>) : <span class="number">0</span>;</div><div class="line">        return max(leftHeight, rightHeight) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a binary tree, find its maximum depth.&lt;/p&gt;
&lt;p&gt;The maximum depth is the number of nodes along the longest path from the root node do
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode101. Symmetric Tree</title>
    <link href="http://mingyi.js.org/2017/02/14/LeeCode101-Symmetric-Tree/"/>
    <id>http://mingyi.js.org/2017/02/14/LeeCode101-Symmetric-Tree/</id>
    <published>2017-02-14T20:36:36.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">2</span></div><div class="line"> / \ / \</div><div class="line"><span class="number">3</span>  <span class="number">4</span> <span class="number">4</span>  <span class="number">3</span></div></pre></td></tr></table></figure>
<p>But the following [1,2,2,null,3,null,3] is not:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="number">1</span></div><div class="line"> / \</div><div class="line"><span class="number">2</span>   <span class="number">2</span></div><div class="line"> \   \</div><div class="line"> <span class="number">3</span>    <span class="number">3</span></div></pre></td></tr></table></figure>
<p>Note:<br>Bonus points if you could solve it both recursively and iteratively.</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">bool</span> isSymmetric(TreeNode* root) &#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">        </div><div class="line">        <span class="keyword">return</span> help(root-&gt;left, root-&gt;right);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">bool</span> help(TreeNode* p1, TreeNode* p2) &#123;</div><div class="line">        <span class="keyword">if</span> (p1 == <span class="keyword">NULL</span> &amp;&amp; p2 == <span class="keyword">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (p1 == <span class="keyword">NULL</span> || p2 == <span class="keyword">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> p1-&gt;val == p2-&gt;val &amp;&amp; help(p1-&gt;left, p2-&gt;right) &amp;&amp; help(p1-&gt;right, p2-&gt;left);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).&lt;/p&gt;
&lt;p&gt;For example, this binary tree [1,2,
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode100. Same Tree</title>
    <link href="http://mingyi.js.org/2017/02/14/LeeCode100-Same-Tree/"/>
    <id>http://mingyi.js.org/2017/02/14/LeeCode100-Same-Tree/</id>
    <published>2017-02-14T19:58:25.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode *<span class="built_in">left</span>;</div><div class="line"> *     TreeNode *<span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) : val(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    bool isSameTree(TreeNode* p, TreeNode* q) &#123;</div><div class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span> &amp;&amp; q == <span class="literal">NULL</span>)</div><div class="line">            return <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> ((p == <span class="literal">NULL</span> &amp;&amp; q != <span class="literal">NULL</span>) || (q == <span class="literal">NULL</span> &amp;&amp; p != <span class="literal">NULL</span>))</div><div class="line">            return <span class="literal">false</span>;</div><div class="line">        return p-&gt;val == q-&gt;val &amp;&amp; isSameTree(p-&gt;<span class="built_in">left</span>, q-&gt;<span class="built_in">left</span>) &amp;&amp; isSameTree(p-&gt;<span class="built_in">right</span>, q-&gt;<span class="built_in">right</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two binary trees, write a function to check if they are equal or not.&lt;/p&gt;
&lt;p&gt;Two binary trees are considered equal if they are stru
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode88. Merge Sorted Array</title>
    <link href="http://mingyi.js.org/2017/02/14/LeeCode88-Merge-Sorted-Array/"/>
    <id>http://mingyi.js.org/2017/02/14/LeeCode88-Merge-Sorted-Array/</id>
    <published>2017-02-14T19:48:50.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>
<p>Note:<br>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.</p>
<p>从后往前归并</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="string">public:</span></div><div class="line">    <span class="keyword">void</span> merge(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="keyword">if</span> (m == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> pos1 = m - <span class="number">1</span>, pos2 = n - <span class="number">1</span>, cur = m + n - <span class="number">1</span>, minnum = <span class="number">-1000000</span>;</div><div class="line">        <span class="keyword">while</span> (pos1 &gt;= <span class="number">0</span> || pos2 &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> val1 = pos1 &lt; <span class="number">0</span> ? minnum : nums1[pos1], val2 = pos2 &lt; <span class="number">0</span> ? minnum : nums2[pos2];</div><div class="line">            nums1[cur--] = val1 &gt; val2 ? nums1[pos1--] : nums2[pos2--];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;You may assume that nums1 ha
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode26. Remove Duplicates from Sorted Array</title>
    <link href="http://mingyi.js.org/2017/02/14/LeeCode26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://mingyi.js.org/2017/02/14/LeeCode26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2017-02-14T19:20:04.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    <span class="keyword">int</span> removeDuplicates(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">s</span> = nums.size();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">s</span> &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">s</span>;</div><div class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>, <span class="keyword">pos</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">pos</span> = <span class="number">1</span>; <span class="keyword">pos</span> &lt; <span class="keyword">s</span>; <span class="keyword">pos</span>++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[<span class="keyword">pos</span>] != nums[cur])</div><div class="line">                nums[++cur] = nums[<span class="keyword">pos</span>];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cur + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.&lt;/p&gt;
&lt;p&gt;Do not all
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode3. Longest Substring Without Repeating Characters</title>
    <link href="http://mingyi.js.org/2017/02/14/LeeCode3-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://mingyi.js.org/2017/02/14/LeeCode3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2017-02-14T01:26:00.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Examples:</p>
<p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p>
<p>Given “bbbbb”, the answer is “b”, with the length of 1.</p>
<p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
<h4 id="扫一遍字符串即可得到需要的结果-时间复杂度O-N"><a href="#扫一遍字符串即可得到需要的结果-时间复杂度O-N" class="headerlink" title="扫一遍字符串即可得到需要的结果 时间复杂度O(N)"></a>扫一遍字符串即可得到需要的结果 时间复杂度O(N)</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line"><span class="symbol">public:</span></div><div class="line">    int lengthOfLongestSubstring(string s) &#123;</div><div class="line">        int a[<span class="number">256</span>] = &#123;-<span class="number">1</span>&#125;, len = s.length(), result = <span class="number">0</span>, maxlen = <span class="number">0</span>, <span class="keyword">j, </span>start = <span class="number">0</span><span class="comment">;</span></div><div class="line">        for (<span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt; len; j++) &#123;</span></div><div class="line">            int cur = s[<span class="keyword">j];</span></div><div class="line">            if (a[cur] &gt; start)</div><div class="line">                start = a[cur]<span class="comment">;</span></div><div class="line">            result = <span class="keyword">j </span>- start<span class="comment">;</span></div><div class="line">            maxlen = max(result, maxlen)<span class="comment">;</span></div><div class="line">            a[cur] = <span class="keyword">j;</span></div><div class="line">        &#125;</div><div class="line">        return maxlen<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;p&gt;Given “abcabcbb”, the answ
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode2. Add Two Numbers</title>
    <link href="http://mingyi.js.org/2017/02/14/LeetCode2-Add-Two-Numbers/"/>
    <id>http://mingyi.js.org/2017/02/14/LeetCode2-Add-Two-Numbers/</id>
    <published>2017-02-14T01:21:48.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8</p>
<h4 id="大数相加"><a href="#大数相加" class="headerlink" title="大数相加"></a>大数相加</h4><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * <span class="type">Definition</span> <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</div><div class="line"> * <span class="keyword">struct</span> <span class="type">ListNode</span> &#123;</div><div class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</div><div class="line"> *     <span class="type">ListNode</span> *next;</div><div class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x) : <span class="keyword">val</span>(x), next(<span class="type">NULL</span>) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</div><div class="line">public:</div><div class="line">    <span class="type">ListNode</span>* addTwoNumbers(<span class="type">ListNode</span>* l1, <span class="type">ListNode</span>* l2) &#123;</div><div class="line">        <span class="type">ListNode</span> head(-<span class="number">1</span>), *current = &amp;head;</div><div class="line">        <span class="built_in">int</span> extra = <span class="number">0</span>, l1val = <span class="number">0</span>, l2val = <span class="number">0</span>, sum;</div><div class="line">        <span class="keyword">while</span> (l1 || l2) &#123;</div><div class="line">            l1val = <span class="number">0</span>, l2val = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (l1) &#123;</div><div class="line">                l1val = l1-&gt;<span class="keyword">val</span>;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (l2) &#123;</div><div class="line">                l2val = l2-&gt;<span class="keyword">val</span>;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            sum = l1val + l2val + extra;</div><div class="line">            <span class="type">ListNode</span> *n = <span class="keyword">new</span> <span class="type">ListNode</span>(sum % <span class="number">10</span>);</div><div class="line">            extra = sum / <span class="number">10</span>;</div><div class="line">            current-&gt;next = n;</div><div class="line">            current = n;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (extra &gt; <span class="number">0</span>) &#123;</div><div class="line">            current-&gt;next = <span class="keyword">new</span> <span class="type">ListNode</span>(extra);</div><div class="line">        &#125;</div><div class="line">        return head.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode14. Longest Common Prefix</title>
    <link href="http://mingyi.js.org/2017/02/13/LeetCode14-Longest-Common-Prefix/"/>
    <id>http://mingyi.js.org/2017/02/13/LeetCode14-Longest-Common-Prefix/</id>
    <published>2017-02-13T23:56:23.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<h4 id="暴力穷举"><a href="#暴力穷举" class="headerlink" title="暴力穷举"></a>暴力穷举</h4><p>先找出最短的一个字符串，然后遍历这个字符串的每个字符，与其余每个字符串对应的位置做比较，直到找到不同时中止，时间复杂度O(N*M)<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">string</span> longestCommonPrefix(vector&lt;<span class="keyword">string</span>&gt;&amp; strs) &#123;</div><div class="line">        <span class="built_in">if</span> (strs.<span class="built_in">size</span>() == <span class="number">0</span>)</div><div class="line">            <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">        <span class="built_in">if</span> (strs.<span class="built_in">size</span>() == <span class="number">1</span>)</div><div class="line">            <span class="built_in">return</span> strs[<span class="number">0</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> minlenstrpos = <span class="number">-1</span>, minlen = <span class="number">1000000</span>;</div><div class="line">        <span class="keyword">string</span> result = <span class="string">""</span>;</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++) &#123;</div><div class="line">            <span class="built_in">if</span> (strs[i].length() &lt; minlen) &#123;</div><div class="line">                minlen = strs[i].length();</div><div class="line">                minlenstrpos = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="built_in">for</span> (; j &lt; strs[minlenstrpos].length(); j++) &#123;</div><div class="line">            <span class="keyword">char</span> cur = strs[minlenstrpos][j];</div><div class="line">            <span class="built_in">for</span> (<span class="keyword">auto</span> str: strs) &#123;</div><div class="line">                <span class="built_in">if</span> (str[j] == cur)</div><div class="line">                    <span class="built_in">continue</span>;</div><div class="line">                <span class="built_in">else</span> &#123;</div><div class="line">                    result = strs[minlenstrpos].substr(<span class="number">0</span>, j);</div><div class="line">                    j = strs[minlenstrpos].length() + <span class="number">1</span>;</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">if</span> (j == strs[minlenstrpos].length()) </div><div class="line">            result = strs[minlenstrpos];</div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h4><p>时间复杂度O(N*M)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> NodeStruct &#123;</div><div class="line">        <span class="keyword">char</span> c; <span class="comment">// 记录节点字符</span></div><div class="line">        <span class="keyword">int</span> degree; <span class="comment">// 记录节点的度 方便查找</span></div><div class="line">        NodeStruct* child[<span class="number">26</span>]; <span class="comment">// 子节点</span></div><div class="line">    &#125; Node, *PtrToNode;</div><div class="line">    </div><div class="line">    <span class="function">PtrToNode <span class="title">createTrie</span><span class="params">()</span> </span>&#123;</div><div class="line">        PtrToNode root = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line">        root-&gt;degree = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) </div><div class="line">            root-&gt;child[i] = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertStrToTrie</span><span class="params">(PtrToNode root, <span class="keyword">const</span> <span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = str.length();</div><div class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, idx;</div><div class="line">        PtrToNode head = root;</div><div class="line">        <span class="keyword">for</span> (; i &lt; len; i++) &#123;</div><div class="line">            idx = str[i] - <span class="string">'a'</span>;</div><div class="line">            <span class="keyword">if</span> (head-&gt;child[idx] != <span class="literal">NULL</span>) &#123;</div><div class="line">                head = head-&gt;child[idx];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                PtrToNode newnode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line">                newnode-&gt;c = str[i];</div><div class="line">                newnode-&gt;degree = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) </div><div class="line">                    newnode-&gt;child[i] = <span class="literal">NULL</span>;</div><div class="line">            </div><div class="line">                head-&gt;degree++;</div><div class="line">                head-&gt;child[idx] = newnode;</div><div class="line">                head = newnode;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (strs.size() == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (strs.size() == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>];</div><div class="line">        </div><div class="line">        PtrToNode root = createTrie();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.size(); i++) </div><div class="line">            insertStrToTrie(root, strs[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> minlenstrpos = <span class="number">-1</span>, minlen = <span class="number">1000000</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (strs[i].length() &lt; minlen) &#123;</div><div class="line">                minlen = strs[i].length();</div><div class="line">                minlenstrpos = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        PtrToNode head = root; <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (head-&gt;degree == <span class="number">1</span> &amp;&amp; j &lt; strs[minlenstrpos].length()) &#123;</div><div class="line">            head = head-&gt;child[strs[minlenstrpos][j++] - <span class="string">'a'</span>];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].substr(<span class="number">0</span>, j);    </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
&lt;h4 id=&quot;暴力穷举&quot;&gt;&lt;a href=&quot;#暴力穷举&quot; class=&quot;headerlin
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode53. Maximum Subarray</title>
    <link href="http://mingyi.js.org/2016/12/02/LeetCode53-Maximum-Subarray/"/>
    <id>http://mingyi.js.org/2016/12/02/LeetCode53-Maximum-Subarray/</id>
    <published>2016-12-02T21:14:16.000Z</published>
    <updated>2017-02-15T15:43:57.579Z</updated>
    
    <content type="html"><![CDATA[<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.</p>
<h4 id="穷举法-时间复杂度O-N3"><a href="#穷举法-时间复杂度O-N3" class="headerlink" title="穷举法 时间复杂度O(N3)"></a>穷举法 时间复杂度O(N3)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, maxSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; N; x++) &#123;</div><div class="line">        <span class="keyword">for</span> (y = x; y &lt; N; y++ ) &#123;</div><div class="line">            <span class="keyword">int</span> k, thisSum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (k = x; k &lt;= y; k++) &#123;</div><div class="line">                thisSum += a[k];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</div><div class="line">                maxSum = thisSum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxSum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="穷举法优化冗余的求和步骤-时间复杂度O-N2"><a href="#穷举法优化冗余的求和步骤-时间复杂度O-N2" class="headerlink" title="穷举法优化冗余的求和步骤 时间复杂度O(N2)"></a>穷举法优化冗余的求和步骤 时间复杂度O(N2)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, maxSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; N; x++) &#123;</div><div class="line">        <span class="keyword">int</span> thisSum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (y = x; y &lt; N; y++) &#123;</div><div class="line">            thisSum += a[y];</div><div class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</div><div class="line">                maxSum = thisSum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxSum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="贪心法-时间复杂度O-N"><a href="#贪心法-时间复杂度O-N" class="headerlink" title="贪心法 时间复杂度O(N)"></a>贪心法 时间复杂度O(N)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x, maxSum = <span class="number">0</span>, thisSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; N; x++) &#123;</div><div class="line">        thisSum += a[x];</div><div class="line">        <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</div><div class="line">            maxSum = thisSum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>) &#123;</div><div class="line">            thisSum = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxSum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;
&lt;p&gt;For example, given the ar
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
