<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>茗一的笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mingyi.js.org/"/>
  <updated>2017-02-13T15:54:36.909Z</updated>
  <id>http://mingyi.js.org/</id>
  
  <author>
    <name>Mingyi Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode53 Maximum Subarray</title>
    <link href="http://mingyi.js.org/2016/12/02/Maximum-Subsequence-Sum/"/>
    <id>http://mingyi.js.org/2016/12/02/Maximum-Subsequence-Sum/</id>
    <published>2016-12-02T21:14:16.000Z</published>
    <updated>2017-02-13T15:54:36.909Z</updated>
    
    <content type="html"><![CDATA[<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.</p>
<p>穷举法 时间复杂度O(N3)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, maxSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; N; x++) &#123;</div><div class="line">        <span class="keyword">for</span> (y = x; y &lt; N; y++ ) &#123;</div><div class="line">            <span class="keyword">int</span> k, thisSum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (k = x; k &lt;= y; k++) &#123;</div><div class="line">                thisSum += a[k];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</div><div class="line">                maxSum = thisSum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxSum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>穷举法优化冗余的求和步骤 时间复杂度O(N2)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, maxSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; N; x++) &#123;</div><div class="line">        <span class="keyword">int</span> thisSum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (y = x; y &lt; N; y++) &#123;</div><div class="line">            thisSum += a[y];</div><div class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</div><div class="line">                maxSum = thisSum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxSum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>贪心法 时间复杂度O(N)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x, maxSum = <span class="number">0</span>, thisSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; N; x++) &#123;</div><div class="line">        thisSum += a[x];</div><div class="line">        <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</div><div class="line">            maxSum = thisSum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>) &#123;</div><div class="line">            thisSum = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxSum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;
&lt;p&gt;For example, given the ar
    
    </summary>
    
    
      <category term="数据结构, 算法" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>做头像修改组件后的记录</title>
    <link href="http://mingyi.js.org/2013/12/09/potrait-record/"/>
    <id>http://mingyi.js.org/2013/12/09/potrait-record/</id>
    <published>2013-12-09T13:55:22.000Z</published>
    <updated>2017-02-13T15:54:36.913Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做头像上传的组件，遇到比较头疼的是当用户修改完头像后去CDN缓存的问题。因为百度的头像系统每个用户的头像地址是唯一的固定不变的，CDN那边是可以做到当用户修改头像时在小于1s内洗掉原来旧头像的缓存，但CDN缓存更新了，浏览器可不知道啊，除非按F5或ctrl+F5会重新去cdn那对比，然后再拉取新的头像回来。最龊的办法就是，头像保存后reload下页面，相当于帮用户按下F5，但这样的体验很烂。那有没有办法悄悄的帮用户刷掉缓存呢?</p>
<p>看了看QQ空间的做法，在后端会存一个修改头像的时间戳，前端显示自己头像的地方，会加上后端返回的这个时间戳，每次更新头像的时候，后端同时更新这个时间戳。这办法还是挺靠谱的。哈哈，贴吧最终也是这么做的。</p>
<p>但我还是想有没有别的办法，前端来去CDN的缓存，也就是悄悄的帮用户按F5呢？<br>发个AJAX请求去请求头像地址，设置request header的cache-control为no-cache。但这样跨域是不行的。头像系统因为是有很多个产品线共用的，所以有自己的域名。这条行不通了。</p>
<p>突然想起去年D2上有淘宝同学分享过第三方js插件脚本自更新的解决方案，里面有介绍过一篇文章Self-updating scripts，看了下，发现里面正是我需要的，其实做法就是创建一个iframe，里面去刷新你需要清掉缓存的资源文件。</p>
<p>立马就动手写了个页面试了下，果真可以唉。插入的iframe<a href="http://tieba.baidu.com/tb/zt/itieba/cleancache.html?sign=ee31dcf8d2bbb700" target="_blank" rel="external">在这</a>。抓浏览器的网络请求，会发现每次请求头像的时候都是会返回200的状态码了！</p>
<p>后来一想，以上的这些只是自己的意淫的做法，真正想清还是需要通过后端传时间戳的方式，因为可以修改头像的地方实在是太多了，那么多的客户端以及无线智能版都可以修改，pc浏览器又怎么能知道呢?!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做头像上传的组件，遇到比较头疼的是当用户修改完头像后去CDN缓存的问题。因为百度的头像系统每个用户的头像地址是唯一的固定不变的，CDN那边是可以做到当用户修改头像时在小于1s内洗掉原来旧头像的缓存，但CDN缓存更新了，浏览器可不知道啊，除非按F5或ctrl+F5会重新
    
    </summary>
    
    
      <category term="项目总结" scheme="http://mingyi.js.org/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>有关前端跨域问题的总结</title>
    <link href="http://mingyi.js.org/2013/05/20/coross-domain-problem/"/>
    <id>http://mingyi.js.org/2013/05/20/coross-domain-problem/</id>
    <published>2013-05-20T15:06:23.000Z</published>
    <updated>2017-02-13T15:54:36.913Z</updated>
    
    <content type="html"><![CDATA[<p>与后端接口跨域数据通信算是一个比较常见的情景，并且现在也已经有了非常多的解决方案，在此我就来整理下自己对于跨域问题的解决方案。</p>
<p>与后端接口数据通信主要分为HTTP GET和POST两种，说到它们之间的区别，表面上的区别就不讲了，太基础了，什么长度限制等等自己查下就清楚了。这里主要说下它们的语义：</p>
<blockquote>
<p>对于GET，是用于获取指定URL上的资源，是读的操作，无论对某个资源进行多少次，它的状态是不会改变的，在这个意义上我们可以讲GET是安全的，因为GET是安全的，所以返回的内容可以被浏览器、Cache服务器缓存起来；</p>
<p>对于POST，语义是对指定资源添加或修改数据，所以是不安全的。每次提交POST，参与的代码都会认为这个操作会修改操作资源对象的状态，于是浏览器在按下F5时会弹出确认框，同时浏览器和Cache服务器不会缓存POST的内容。<br>安全的是指没有明显的对用户有影响的副作用(包括修改该资源的状态)。HTTP方法里的GET和HEAD都是安全的。<br>还有个概念叫幂等，是指一个方法不论多少次操作，结果都是一样。PUT(把内容放到指定URL)，DELETE(删除某个URL代表的资源)，虽然都修改了资源内容，但多次操作，结果是相同的，因此和HEAD，GET一样都是幂等的。<br>所以根据HTTP协议，GET是安全的，也是幂等的，而POST既不是安全的，也不是幂等的。</p>
</blockquote>
<p>扯得有点远了，继续回到跨域数据通信的问题上来。<br>按上面说的，接口大体上会有读与写两种类型的需求，读数据用jsonp能解决掉跨域、跨浏览器的问题。但写数据时，用GET方式似乎不太稳妥，当然，如果后端能够很好的解决这样的安全问题，其实写用jsonp来与客户端通信也是很好的，这样的话，就能省不少的事。记得支付宝给第三方的快捷支付的接口，就全部是GET的方式处理的，但经过一系列的各种加密什么的处理，还是非常安全的。</p>
<p>在这里还是不想对写数据接口用jsonp进行，当然我也不喜欢用flash来跨域通信的方式，也不考虑CORS这些需要后端一些改动的方法，我想回归最简单、最纯粹的方式。要POST数据，我就构建一个form表单来post吧。直接把form表单的action指向后端接口，这样做太幼稚了，整个页面会刷新跳转到到action指定的接口那去的，所以在这里会把form的target的值设定为一个iframe的name，这样表单提交的目标成了iframe，form提交的结果也只会在那个iframe中出现，页面就不会跳转了。</p>
<p>当然这个iframe显然要隐藏掉，这种小勾当还是不要让用户看到的好，好好的页面中出现一个傻傻的空白iframe，会被骂死的，所以一定要记得iframe要display: none。</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">var iframe = $(<span class="string">'&lt;iframe '</span></div><div class="line">    + <span class="string">'frameborder="</span><span class="number">0</span><span class="string">"'</span></div><div class="line">    + <span class="string">'height="</span><span class="number">0</span><span class="string">"'</span></div><div class="line">    + <span class="string">'width="</span><span class="number">0</span><span class="string">"'</span></div><div class="line">    + <span class="string">'name="</span><span class="string">' + id + '</span><span class="string">"'</span></div><div class="line">    + <span class="string">'id="</span><span class="string">' + id + '</span><span class="string">"'</span></div><div class="line">    + <span class="string">'/&gt;'</span>)</div><div class="line">    .appendTo(<span class="string">'body'</span>)</div><div class="line">, form = $(<span class="string">'&lt;form /&gt;'</span>)</div><div class="line">    .attr(&#123;</div><div class="line">        action: <span class="string">'/openmobile/login'</span>,</div><div class="line">        method: <span class="string">'POST'</span>,</div><div class="line">        target: id</div><div class="line">    &#125;)</div><div class="line">    .appendTo(<span class="string">'body'</span>), hiddens = &#123;&#125;;</div><div class="line"></div><div class="line">$.each(&#123;</div><div class="line">        loginType: <span class="string">'meetstudio'</span>,</div><div class="line">        appId: <span class="number">1</span>,</div><div class="line">        account: <span class="string">'amy@meet-future.com'</span>,</div><div class="line">        password: <span class="string">'111111'</span></div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span><span class="params">(_name, _value)</span> &#123;</span></div><div class="line">        hiddens[_name] = $(<span class="string">'&lt;input /&gt;'</span>).attr(&#123;</div><div class="line">        name: _name,</div><div class="line">        value: _value,</div><div class="line">        <span class="built_in">type</span>: <span class="string">'hidden'</span></div><div class="line">    &#125;).appendTo(form);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这只是一个片段，很显然的功能就是构建一个iframe与一个form，插入body中。当然，可怜的form中还被插了许多的type=hidden的input，这些都是一些必要的参数。</p>
<p>为何iframe是用那么丑陋的方式来写呢？据前辈们介绍，因为这里有一个坑。在低版本的ie中，利用javascript动态插入的iframe，属性很容易broken，这算是一个bug。解决方式就是你最好把整个iframe一次性的插入页面中，或者需要的时候（比如在提交表单时）检查一下iframe的name是否与你预想中的一样，不同的话，再指定一次name。</p>
<h3 id="从iframe中取到接口返回的结果"><a href="#从iframe中取到接口返回的结果" class="headerlink" title="从iframe中取到接口返回的结果"></a>从iframe中取到接口返回的结果</h3><p>这个网络上有许多解决方案啦。从iframe中读取接口返回的数据，步骤说明如下：</p>
<ol>
<li>post 数据到接口时，开启 location.hash 变化的监听器</li>
<li>后端接口返回时把数据写到父页面的 location.hash 中</li>
<li>当发现hash有变化时，暂停监听<br>好了，数据到手。</li>
</ol>
<p>最后千万合理的使用那个监听器，一直在那循环着，对浏览器和用户的机器可不是什么好事。如果不小心把用户的电脑搞死机了，那一定就悲伤成河了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与后端接口跨域数据通信算是一个比较常见的情景，并且现在也已经有了非常多的解决方案，在此我就来整理下自己对于跨域问题的解决方案。&lt;/p&gt;
&lt;p&gt;与后端接口数据通信主要分为HTTP GET和POST两种，说到它们之间的区别，表面上的区别就不讲了，太基础了，什么长度限制等等自己查
    
    </summary>
    
    
      <category term="前端, 跨域" scheme="http://mingyi.js.org/tags/%E5%89%8D%E7%AB%AF-%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>WEB APP开发项目总结</title>
    <link href="http://mingyi.js.org/2013/05/07/webapp-develop-experience-summary/"/>
    <id>http://mingyi.js.org/2013/05/07/webapp-develop-experience-summary/</id>
    <published>2013-05-07T15:13:37.000Z</published>
    <updated>2017-02-13T15:54:36.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前人的经验"><a href="#前人的经验" class="headerlink" title="前人的经验"></a>前人的经验</h2><p>第一次做WEB APP，自然少不了看些前人总结的一些文章，补充下基本的知识，这里有两篇总结的比较好的文章，对viewpoint、meta、mediaquery、touch事件等基本知识。还有一篇是豆瓣的一位前端在开发豆瓣阅读时的总结，写的非常棒。</p>
<blockquote>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/28/webkit-webapp.html" target="_blank" rel="external">webapp开发要点</a><br><a href="http://huisecheng.com/blog/2013/01/ugly-tips-in-mobile-f2e-development/" target="_blank" rel="external">在移动浏览器中踩过的坑</a><br><a href="http://lyric.im/best-practice-for-web-app-development/" target="_blank" rel="external">当前 WEB APP 开发的最佳实践</a></p>
</blockquote>
<h2 id="弹性盒子模型"><a href="#弹性盒子模型" class="headerlink" title="弹性盒子模型"></a>弹性盒子模型</h2><p>对一个父元素使用display: box其实就是弹性盒子模型的声明，毕竟属于CSS3的东西，使用的时候，需要附带私有前缀。就是诸如-moz-, -webkit-之类。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#father</span> &#123;</div><div class="line">    <span class="attribute">-webkit-display</span>: box;</div><div class="line">    <span class="attribute">-moz-display</span>: box; </div><div class="line">    <span class="attribute">display</span>: box; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设父元素下有三个子元素，它们的样式如下</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#first_boy</span> &#123; <span class="attribute">-webkit-box-flex</span>: <span class="number">2</span>; <span class="attribute">-mox-box-flex</span>: <span class="number">2</span>; <span class="attribute">box-flex</span>: <span class="number">2</span>; &#125;</div><div class="line"><span class="selector-id">#second_boy</span> &#123; <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>; <span class="attribute">-mox-box-flex</span>: <span class="number">1</span>; <span class="attribute">box-flex</span>: <span class="number">1</span>; &#125;</div><div class="line"><span class="selector-id">#three_boy</span> &#123; <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>; <span class="attribute">-mox-box-flex</span>: <span class="number">1</span>; <span class="attribute">box-flex</span>: <span class="number">1</span>; &#125;</div></pre></td></tr></table></figure>
<p>上面的样式解释下，就是将父元素水平分成四等份，其中#first_boy占2份，second_boy和three_boy各占一份。</p>
<p>下面接着来介绍下在父元素上还有的几个非常厉害的属性</p>
<blockquote>
<p>box-orient: 用来确定子元素的方向。是横着排还是竖着走。可选的值有: horizontal | vertical | inline-axis | block-axis | inherit<br>box-direction: 是用来确定子元素的排列顺序，可选值有: normal | reverse | inherit<br>box-align与box-pack都是决定盒子内部剩余空间怎么使用的。在行为效果上就是表现为“对齐”。其中box-align决定了垂直方向上的空间利用，也就是垂直方向上的对齐表现。为了便于记忆，我们可以拿来和CSS2中的vertical-align隐射记忆，两者都有”align”，都是都是垂直方向的对齐；而剩下的box-pack就是水平方向的了。可选参数有: start | end | center | baseline | stretch<br>其中stretch为默认值，为拉伸，也就是父标签高度过高，其孩子元素的高度就多高，以后等高布局不用愁了。start表示顶边对齐，end为底部对齐，center为居中对齐，baseline表示基线（英文字母o,m,n等的底边位置线）对齐<br>box-pack: 决定了父标签水平遗留空间的使用，其可选值有: start | end | center | justify，就大部分的行为表现来说分别对应text-align属性的值：left | right | center | justify</p>
</blockquote>
<h2 id="使用localStorage遇到的一些问题"><a href="#使用localStorage遇到的一些问题" class="headerlink" title="使用localStorage遇到的一些问题"></a>使用localStorage遇到的一些问题</h2><blockquote>
<p>localStorage是同步的，会阻塞页面的渲染<br>对I/O有操作，读取数据消耗的时间随机<br>有大小限制，一般默认为5M，在内存吃紧时会丢失数据</p>
</blockquote>
<h2 id="总结一下在这次webapp开发过程中程序和设计上遇到的坑"><a href="#总结一下在这次webapp开发过程中程序和设计上遇到的坑" class="headerlink" title="总结一下在这次webapp开发过程中程序和设计上遇到的坑"></a>总结一下在这次webapp开发过程中程序和设计上遇到的坑</h2><blockquote>
<p>设计上用了太多的图片，每一个标题文字都用的是图片，直接导致资源文件太多，并且为了适应多屏，图片会被各种拉伸，导致布局起来异常艰难<br>在手机浏览器上对position: fixed支持的不是很好，并且顶部的状态栏设计的是个不规则形状的图片，不能定高。在不同屏幕尺寸下等比拉升后，尤其在横屏时，高度会变得非常高，就一个状态栏就能占满整个屏幕<br>没有考虑到任何硬件加速的 CSS 3 属性的动画效果，所有的动画只能通过传统的DOM换图，导致性能卡死<br>因为主要是在智能终端上做音乐播放功能，完全没有必要使用SoundManager插件去兼容各种情况，应该直接用HTML5的audio API来播放音乐。用了这个插件在各个平台下会导致各种奇怪头疼的问题。</p>
</blockquote>
<p>对于audio API，github上依旧有各种对audio api的详细的示例代码 <a href="http://learnshare.github.io/labs/audio/audio-apis.html" target="_blank" rel="external">http://learnshare.github.io/labs/audio/audio-apis.html</a><br>项目地址：<a href="https://github.com/LearnShare/LearnShare.github.io/tree/master/labs/audio" target="_blank" rel="external">https://github.com/LearnShare/LearnShare.github.io/tree/master/labs/audio</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前人的经验&quot;&gt;&lt;a href=&quot;#前人的经验&quot; class=&quot;headerlink&quot; title=&quot;前人的经验&quot;&gt;&lt;/a&gt;前人的经验&lt;/h2&gt;&lt;p&gt;第一次做WEB APP，自然少不了看些前人总结的一些文章，补充下基本的知识，这里有两篇总结的比较好的文章，对view
    
    </summary>
    
    
      <category term="项目总结" scheme="http://mingyi.js.org/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
