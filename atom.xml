<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>茗一的笔记</title>
  <subtitle>沉淀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mingyi.js.org/"/>
  <updated>2017-02-20T15:02:30.541Z</updated>
  <id>http://mingyi.js.org/</id>
  
  <author>
    <name>Mingyi Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeeCode11. Container With Most Water</title>
    <link href="http://mingyi.js.org/2017/02/20/LeeCode11-Container-With-Most-Water/"/>
    <id>http://mingyi.js.org/2017/02/20/LeeCode11-Container-With-Most-Water/</id>
    <published>2017-02-20T22:59:33.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p>Note: You may not slant the container and n is at least 2.</p>
<h4 id="两头扫，贪心法-时间复杂度O-n"><a href="#两头扫，贪心法-时间复杂度O-n" class="headerlink" title="两头扫，贪心法 时间复杂度O(n)"></a>两头扫，贪心法 时间复杂度O(n)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    int maxArea(vector&lt;int&gt;&amp; height) &#123;</div><div class="line">        int s = height.size(), <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = s - <span class="number">1</span>, result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</div><div class="line">            int h = <span class="built_in">min</span>(height[<span class="keyword">left</span>], height[<span class="keyword">right</span>]);</div><div class="line">            result = <span class="built_in">max</span>(result, h * (<span class="keyword">right</span> - <span class="keyword">left</span>));</div><div class="line">            <span class="keyword">while</span> (height[<span class="keyword">left</span>] &lt;= h &amp;&amp; <span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123; <span class="keyword">left</span>++; &#125;</div><div class="line">            <span class="keyword">while</span> (height[<span class="keyword">right</span>] &lt;= h &amp;&amp; <span class="keyword">right</span> &gt; <span class="keyword">left</span>) &#123; <span class="keyword">right</span>--; &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that th
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode10. Regular Expression Matching</title>
    <link href="http://mingyi.js.org/2017/02/20/LeeCode10-Regular-Expression-Matching/"/>
    <id>http://mingyi.js.org/2017/02/20/LeeCode10-Regular-Expression-Matching/</id>
    <published>2017-02-20T16:18:19.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Implement regular expression matching with support for ‘.’ and ‘*’.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'.'</span> Matches any single character.</div><div class="line"><span class="string">'*'</span> Matches zero or more of the preceding element.</div><div class="line"></div><div class="line">The matching should cover the entire <span class="selector-tag">input</span> string (not partial).</div><div class="line"></div><div class="line">The function prototype should be:</div><div class="line">bool isMatch(const char *s, const char *p)</div><div class="line"></div><div class="line">Some examples:</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"a"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"aa"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aaa"</span>,<span class="string">"aa"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">"a*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"ab"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>)</span></span> → true</div></pre></td></tr></table></figure></p>
<h4 id="如果p当前是-号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分"><a href="#如果p当前是-号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分" class="headerlink" title="如果p当前是*号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分"></a>如果p当前是*号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分</h4><h4 id="递归解法如下"><a href="#递归解法如下" class="headerlink" title="递归解法如下"></a>递归解法如下</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span>(<span class="params"><span class="keyword">string</span> s, <span class="keyword">string</span> p</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> lens = s.length(), lenp = p.length();</div><div class="line">        <span class="keyword">if</span> (lenp == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> lens == <span class="number">0</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">if</span> (p[<span class="number">1</span>] == <span class="string">'*'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (i &lt; lens &amp;&amp; (s[i] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>)) &#123;</div><div class="line">                <span class="keyword">if</span> (isMatch(s.substr(i + <span class="number">1</span>), p.substr(<span class="number">2</span>)))</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> isMatch(s, p.substr(<span class="number">2</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> lens &gt; <span class="number">0</span> &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>) &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法"><a href="#若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法" class="headerlink" title="若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法"></a>若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dp[i][j] 表示s[<span class="number">0</span>, i<span class="number">-1</span>] 和 p[<span class="number">0</span>, j<span class="number">-1</span>]是否匹配</div><div class="line">初始解:</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = true; // 两个空字符串</div><div class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] 和 dp[<span class="number">1</span>][<span class="number">0</span>] 均是false</div><div class="line">状态转义方程：</div><div class="line">    如果p[j - <span class="number">1</span>]不是*也不是.则判断 s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</div><div class="line">    如果p[j - <span class="number">1</span>]是. 则dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</div><div class="line">    如果p[j - <span class="number">1</span>]是* 则分三种情况</div><div class="line">        <span class="number">1.</span> 匹配<span class="number">0</span>个  dp[i][j] = dp[i][j - <span class="number">2</span>]</div><div class="line">        <span class="number">2.</span> 匹配<span class="number">1</span>个  dp[i][j] = dp[i][j - <span class="number">1</span>]</div><div class="line">        <span class="number">3.</span> 匹配多个 dp[i][j] = dp[i - <span class="number">1</span>][j] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">'.'</span></div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lens = s.length(), lenp = p.length();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(lens + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(lenp + <span class="number">1</span>, <span class="literal">false</span>));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; lenp + <span class="number">1</span>; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] != <span class="string">'.'</span> &amp;&amp; p[j - <span class="number">1</span>] != <span class="string">'*'</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'.'</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (dp[i][j - <span class="number">2</span>] || dp[i][j - <span class="number">1</span>]) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">'.'</span>)) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> dp[lens][lenp];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement regular expression matching with support for ‘.’ and ‘*’.&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode387. First Unique Character in a String</title>
    <link href="http://mingyi.js.org/2017/02/19/LeeCode387-First-Unique-Character-in-a-String/"/>
    <id>http://mingyi.js.org/2017/02/19/LeeCode387-First-Unique-Character-in-a-String/</id>
    <published>2017-02-19T20:54:24.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p>
<p>Examples:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"leetcode"</span></div><div class="line"><span class="keyword">return</span> <span class="number">0.</span></div><div class="line"></div><div class="line">s = <span class="string">"loveleetcode"</span>,</div><div class="line"><span class="keyword">return</span> <span class="number">2.</span></div></pre></td></tr></table></figure></p>
<p>Note: You may assume the string contain only lowercase letters.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">-1</span>, len = s.length();</div><div class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(<span class="number">26</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            count[s[i] - <span class="string">'a'</span>]++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (count[s[i] - <span class="string">'a'</span>] == <span class="number">1</span>) &#123;</div><div class="line">                result = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.&lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;&lt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode383. Ransom Note</title>
    <link href="http://mingyi.js.org/2017/02/19/LeeCode383-Ransom-Note/"/>
    <id>http://mingyi.js.org/2017/02/19/LeeCode383-Ransom-Note/</id>
    <published>2017-02-19T20:41:59.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>
<p>Each letter in the magazine string can only be used once in your ransom note.</p>
<p>Note:<br>You may assume that both strings contain only lowercase letters.<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">canConstruct<span class="function"><span class="params">(<span class="string">"a"</span>, <span class="string">"b"</span>)</span> -&gt;</span> <span class="literal">false</span></div><div class="line">canConstruct<span class="function"><span class="params">(<span class="string">"aa"</span>, <span class="string">"ab"</span>)</span> -&gt;</span> <span class="literal">false</span></div><div class="line">canConstruct<span class="function"><span class="params">(<span class="string">"aa"</span>, <span class="string">"aab"</span>)</span> -&gt;</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canConstruct</span><span class="params">(<span class="built_in">string</span> ransomNote, <span class="built_in">string</span> magazine)</span> </span>&#123;</div><div class="line">        <span class="keyword">bool</span> result = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = magazine.length(); i &lt; len; i++) &#123;</div><div class="line">            m[magazine[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, len = ransomNote.length(); j &lt; len; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (m[ransomNote[j]]-- == <span class="number">0</span>) &#123;</div><div class="line">                result = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return tru
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode374. Guess Number Higher or Lower</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode374-Guess-Number-Higher-or-Lower/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode374-Guess-Number-Higher-or-Lower/</id>
    <published>2017-02-18T18:08:43.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>We are playing the Guess Game. The game is as follows:</p>
<p>I pick a number from 1 to n. You have to guess which number I picked.</p>
<p>Every time you guess wrong, I’ll tell you whether the number is higher or lower.</p>
<p>You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="number">1</span> : <span class="type">My</span> number <span class="keyword">is</span> lower</div><div class="line"> <span class="number">1</span> : <span class="type">My</span> number <span class="keyword">is</span> higher</div><div class="line"> <span class="number">0</span> : <span class="type">Congrats</span>! You got it!</div></pre></td></tr></table></figure></p>
<p>Example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">10</span>, I pick <span class="number">6.</span></div><div class="line"></div><div class="line">Return <span class="number">6.</span></div></pre></td></tr></table></figure></p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// Forward declaration of guess API.</div><div class="line">// @param num, your guess</div><div class="line">// @return -<span class="number">1</span> <span class="built_in">if</span> my number is <span class="built_in">lower</span>, <span class="number">1</span> <span class="built_in">if</span> my number is higher, otherwise return <span class="number">0</span></div><div class="line"><span class="built_in">int</span> guess(<span class="built_in">int</span> num);</div><div class="line"></div><div class="line">class Solution &#123;</div><div class="line">publ<span class="symbol">ic:</span></div><div class="line">    <span class="built_in">int</span> guessNumber(<span class="built_in">int</span> <span class="built_in">n</span>) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">1</span>, <span class="built_in">right</span> = <span class="built_in">n</span>, <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>, tmp;</div><div class="line">        while (<span class="built_in">left</span> &lt;= <span class="built_in">right</span>) &#123;</div><div class="line">            <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</div><div class="line">            tmp = guess(<span class="built_in">mid</span>);</div><div class="line">            <span class="built_in">if</span> (tmp == <span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">left</span> = <span class="built_in">mid</span> + <span class="number">1</span>;</div><div class="line">            &#125; else <span class="built_in">if</span> (tmp == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">right</span> = <span class="built_in">mid</span> -<span class="number">1</span>;</div><div class="line">            &#125; else &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return <span class="built_in">mid</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are playing the Guess Game. The game is as follows:&lt;/p&gt;
&lt;p&gt;I pick a number from 1 to n. You have to guess which number I picked.&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode371. Sum of Two Integers</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode371-Sum-of-Two-Integers/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode371-Sum-of-Two-Integers/</id>
    <published>2017-02-18T17:52:09.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.</p>
<p>Example:<br>Given a = 1 and b = 2, return 3.</p>
<h4 id="在不考虑进位的情况下-a-b，只考虑进位的情况下-a-amp-b-lt-lt-1，这两个结果相加为和的结果"><a href="#在不考虑进位的情况下-a-b，只考虑进位的情况下-a-amp-b-lt-lt-1，这两个结果相加为和的结果" class="headerlink" title="在不考虑进位的情况下 a ^ b，只考虑进位的情况下 (a &amp; b) &lt;&lt; 1，这两个结果相加为和的结果"></a>在不考虑进位的情况下 a ^ b，只考虑进位的情况下 (a &amp; b) &lt;&lt; 1，这两个结果相加为和的结果</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> getSum(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">sum</span> = a ^ b;</div><div class="line">        <span class="keyword">int</span> extra = (a &amp; b) &lt;&lt; <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (extra != <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> getSum(<span class="keyword">sum</span>, extra);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">sum</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given a = 1 and b = 2,
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode367. Valid Perfect Square</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode367-Valid-Perfect-Square/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode367-Valid-Perfect-Square/</id>
    <published>2017-02-18T17:25:54.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p>
<p>Note: Do not use any built-in library function such as sqrt.</p>
<p>Example 1:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Input:</span> <span class="number">16</span></div><div class="line"><span class="attr">Returns:</span> <span class="literal">True</span></div></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Input:</span> <span class="number">14</span></div><div class="line"><span class="attr">Returns:</span> <span class="literal">False</span></div></pre></td></tr></table></figure></p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">public:</div><div class="line">    <span class="built_in">bool</span> isPerfectSquare(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> tmp = mySqrt(<span class="built_in">num</span>);</div><div class="line">        <span class="keyword">return</span> tmp * tmp == <span class="built_in">num</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">int</span> mySqrt(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="built_in">num</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">int</span> l = <span class="number">0</span>, r = <span class="built_in">num</span> / <span class="number">2</span> + <span class="number">1</span>, mid = (l + r) / <span class="number">2</span>, tmp;</div><div class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</div><div class="line">            mid = (l + r) / <span class="number">2</span>;</div><div class="line">            tmp = <span class="built_in">num</span> / mid;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (tmp &gt; mid) &#123;</div><div class="line">                l = mid + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp &lt; mid) &#123;</div><div class="line">                r = mid - <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a positive integer num, write a function which returns True if num is a perfect square else False.&lt;/p&gt;
&lt;p&gt;Note: Do not use any buil
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode350. Intersection of Two Arrays II</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode350-Intersection-of-Two-Arrays-II/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode350-Intersection-of-Two-Arrays-II/</id>
    <published>2017-02-18T17:03:38.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>
<p>Note:<br>Each element in the result should appear as many times as it shows in both arrays.<br>The result can be in any order.<br>Follow up:<br>What if the given array is already sorted? How would you optimize your algorithm?<br>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?<br>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersect(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : nums1)</div><div class="line">            m[item]++;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : nums2) </div><div class="line">            <span class="keyword">if</span> (m[item]-- &gt; <span class="number">0</span>) </div><div class="line">                result.push_back(item);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode349. Intersection of Two Arrays</title>
    <link href="http://mingyi.js.org/2017/02/17/LeeCode349-Intersection-of-Two-Arrays/"/>
    <id>http://mingyi.js.org/2017/02/17/LeeCode349-Intersection-of-Two-Arrays/</id>
    <published>2017-02-17T11:44:48.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<p>Note:<br>Each element in the result must be unique.<br>The result can be in any order.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</div><div class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s(nums1.begin(), nums1.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item : nums2) &#123;</div><div class="line">            <span class="keyword">if</span> (s.count(item)) &#123;</div><div class="line">                result.push_back(item);</div><div class="line">                s.erase(item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode345. Reverse Vowels of a String</title>
    <link href="http://mingyi.js.org/2017/02/17/LeeCode345-Reverse-Vowels-of-a-String/"/>
    <id>http://mingyi.js.org/2017/02/17/LeeCode345-Reverse-Vowels-of-a-String/</id>
    <published>2017-02-17T11:29:38.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
<p>Example 1:<br>Given s = “hello”, return “holle”.</p>
<p>Example 2:<br>Given s = “leetcode”, return “leotcede”.</p>
<p>Note:<br>The vowels does not include the letter “y”.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">string</span> reverseVowels(<span class="built_in">string</span> s) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">len</span> = s.length(), <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = <span class="built_in">len</span> - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">len</span> &lt; <span class="number">2</span>)</div><div class="line">            return s;</div><div class="line">        <span class="built_in">int</span> dict[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        dict[<span class="comment">'a'] = 1; dict['A'] = 1;</span></div><div class="line">        dict[<span class="comment">'e'] = 1; dict['E'] = 1;</span></div><div class="line">        dict[<span class="comment">'i'] = 1; dict['I'] = 1;</span></div><div class="line">        dict[<span class="comment">'o'] = 1; dict['O'] = 1;</span></div><div class="line">        dict[<span class="comment">'u'] = 1; dict['U'] = 1;</span></div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">left</span> &lt; <span class="built_in">right</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="built_in">left</span> &lt; <span class="built_in">len</span> &amp;&amp; dict[s[<span class="built_in">left</span>]] == <span class="number">0</span>) &#123; <span class="built_in">left</span>++; &#125;;</div><div class="line">            <span class="keyword">while</span> (<span class="built_in">right</span> &gt; <span class="number">0</span> &amp;&amp; dict[s[<span class="built_in">right</span>]] == <span class="number">0</span>) &#123; <span class="built_in">right</span>--; &#125;;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (<span class="built_in">left</span> &lt; <span class="built_in">right</span>) &#123;</div><div class="line">                swap(s[<span class="built_in">left</span>], s[<span class="built_in">right</span>]);</div><div class="line">                <span class="built_in">left</span> ++; <span class="built_in">right</span> --;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return s;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void swap(char &amp;a, char &amp;b) &#123;</div><div class="line">        char tmp = a;</div><div class="line">        a = b;</div><div class="line">        b = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function that takes a string as input and reverse only the vowels of a string.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;Given s = “hello”, return “ho
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode344. Reverse String</title>
    <link href="http://mingyi.js.org/2017/02/17/LeeCode344-Reverse-String/"/>
    <id>http://mingyi.js.org/2017/02/17/LeeCode344-Reverse-String/</id>
    <published>2017-02-17T00:18:15.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function that takes a string as input and returns the string reversed.</p>
<p>Example:<br>Given s = “hello”, return “olleh”.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">string</span> <span class="title">reverseString</span>(<span class="params"><span class="keyword">string</span> s</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = s.length(), left = <span class="number">0</span>, right = l - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (l &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            swap(s[left++], s[right--]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="keyword">char</span> &amp;a, <span class="keyword">char</span> &amp;b</span>) </span>&#123;</div><div class="line">        <span class="keyword">char</span> tmp = a;</div><div class="line">        a = b;</div><div class="line">        b = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function that takes a string as input and returns the string reversed.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given s = “hello”, return “olleh”.&lt;/p&gt;

    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode326. Power of Three</title>
    <link href="http://mingyi.js.org/2017/02/16/LeeCode326-Power-of-Three/"/>
    <id>http://mingyi.js.org/2017/02/16/LeeCode326-Power-of-Three/</id>
    <published>2017-02-16T23:55:01.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer, write a function to determine if it is a power of three.</p>
<p>Follow up:<br>Could you do it without using any loop / recursion?</p>
<h4 id="这个题的follow-up是希望能不用循环或递归，一直想不出来解法，后来看到了下面的这种利用对数的换底公式来做的方法，也是拓宽了思路"><a href="#这个题的follow-up是希望能不用循环或递归，一直想不出来解法，后来看到了下面的这种利用对数的换底公式来做的方法，也是拓宽了思路" class="headerlink" title="这个题的follow up是希望能不用循环或递归，一直想不出来解法，后来看到了下面的这种利用对数的换底公式来做的方法，也是拓宽了思路"></a>这个题的follow up是希望能不用循环或递归，一直想不出来解法，后来看到了下面的这种利用对数的换底公式来做的方法，也是拓宽了思路</h4><p>log以3为底的n的对数等于以n为底10的对数除以3为底10的对数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">log10</span>(n) / <span class="built_in">log10</span>(<span class="number">3</span>) - <span class="keyword">int</span>(<span class="built_in">log10</span>(n) / <span class="built_in">log10</span>(<span class="number">3</span>)) == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an integer, write a function to determine if it is a power of three.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;Could you do it without using any loop / 
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode278. First Bad Version</title>
    <link href="http://mingyi.js.org/2017/02/16/LeeCode278-First-Bad-Version/"/>
    <id>http://mingyi.js.org/2017/02/16/LeeCode278-First-Bad-Version/</id>
    <published>2017-02-16T18:05:38.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>
<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.</p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>
<h4 id="二分查找，需要特别注意的是-left-right-相加可能会超过-INT-MAX，所以需要转换成表示范围更大的数据类型，不然会有溢出的可能"><a href="#二分查找，需要特别注意的是-left-right-相加可能会超过-INT-MAX，所以需要转换成表示范围更大的数据类型，不然会有溢出的可能" class="headerlink" title="二分查找，需要特别注意的是 left + right 相加可能会超过 INT_MAX，所以需要转换成表示范围更大的数据类型，不然会有溢出的可能"></a>二分查找，需要特别注意的是 left + right 相加可能会超过 INT_MAX，所以需要转换成表示范围更大的数据类型，不然会有溢出的可能</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Forward declaration of isBadVersion API.</div><div class="line">bool isBadVersion(<span class="built_in">int</span> version);</div><div class="line"></div><div class="line">class Solution &#123;</div><div class="line">publ<span class="symbol">ic:</span></div><div class="line">    <span class="built_in">int</span> firstBadVersion(<span class="built_in">int</span> <span class="built_in">n</span>) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">1</span>, <span class="built_in">right</span> = <span class="built_in">n</span>, <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</div><div class="line">        while (<span class="built_in">left</span> &lt;= <span class="built_in">right</span>) &#123;</div><div class="line">            <span class="built_in">mid</span> = (unsigned <span class="built_in">int</span>)(<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</div><div class="line">            <span class="built_in">if</span> (isBadVersion(<span class="built_in">mid</span>)) &#123;</div><div class="line">                <span class="built_in">if</span> (<span class="built_in">mid</span> == <span class="number">1</span> || (<span class="built_in">mid</span> &gt; <span class="number">1</span> &amp;&amp; !isBadVersion(<span class="built_in">mid</span> - <span class="number">1</span>))) &#123;</div><div class="line">                    break;</div><div class="line">                &#125; else &#123;</div><div class="line">                    <span class="built_in">right</span> = <span class="built_in">mid</span> - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                <span class="built_in">left</span> = <span class="built_in">mid</span> + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return <span class="built_in">mid</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails 
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode283. Move Zeroes</title>
    <link href="http://mingyi.js.org/2017/02/16/LeeCode283-Move-Zeroes/"/>
    <id>http://mingyi.js.org/2017/02/16/LeeCode283-Move-Zeroes/</id>
    <published>2017-02-16T17:31:11.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>Note:<br>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> s = nums.size(), cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</div><div class="line">                nums[cur++] = nums[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (cur &lt; s) &#123;</div><div class="line">            nums[cur++] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode268. Missing Number</title>
    <link href="http://mingyi.js.org/2017/02/16/LeeCode268-Missing-Number/"/>
    <id>http://mingyi.js.org/2017/02/16/LeeCode268-Missing-Number/</id>
    <published>2017-02-16T16:34:32.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<p>For example,<br>Given nums = [0, 1, 3] return 2.</p>
<p>Note:<br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> s = nums.size();</div><div class="line">        nums[s] = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; s) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] != <span class="number">-1</span> &amp;&amp; nums[i] != i) &#123;</div><div class="line">                swap(nums[i], nums[nums[i]]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> result = nums.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.size(); j++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j] == <span class="number">-1</span>) &#123;</div><div class="line">                result = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123;</div><div class="line">        a = a ^ b;</div><div class="line">        b = a ^ b;</div><div class="line">        a = a ^ b;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.&lt;/p&gt;
&lt;p&gt;For example,&lt;b
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode303. Range Sum Query - Immutable</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode303-Range-Sum-Query-Immutable/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode303-Range-Sum-Query-Immutable/</id>
    <published>2017-02-15T23:42:20.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p>
<p>Example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Given nums = [<span class="number">-2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">-5</span>, <span class="number">2</span>, <span class="number">-1</span>]</div><div class="line"></div><div class="line">sumRange(<span class="number">0</span>, <span class="number">2</span>) -&gt; <span class="number">1</span></div><div class="line">sumRange(<span class="number">2</span>, <span class="number">5</span>) -&gt; <span class="number">-1</span></div><div class="line">sumRange(<span class="number">0</span>, <span class="number">5</span>) -&gt; <span class="number">-3</span></div></pre></td></tr></table></figure></p>
<p>Note:<br>You may assume that the array does not change.<br>There are many calls to sumRange function.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> NumArray &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums) &#123;</div><div class="line">        m[<span class="number">-1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">            m[i] = m[i - <span class="number">1</span>] + nums[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> m[j] - m[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your NumArray object will be instantiated and called as such:</div><div class="line"> * NumArray obj = new NumArray(nums);</div><div class="line"> * int param_1 = obj.sumRange(i,j);</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;&lt;figure class=&quot;h
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode263. Ugly Number</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode263-Ugly-Number/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode263-Ugly-Number/</id>
    <published>2017-02-15T23:10:58.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Write a program to check whether a given number is an ugly number.</p>
<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</p>
<p>Note that 1 is typically treated as an ugly number.</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">public:</div><div class="line">    <span class="built_in">bool</span> isUgly(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">num</span> == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">num</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">num</span> % <span class="number">3</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">3</span>;</div><div class="line">        &#125; </div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">num</span> % <span class="number">5</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">5</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span> == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are positive numbers whose prime factors only incl
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode232. Implement Queue using Stacks</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode232-Implement-Queue-using-Stacks/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode232-Implement-Queue-using-Stacks/</id>
    <published>2017-02-15T22:47:05.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Implement the following operations of a queue using stacks.</p>
<p>push(x) – Push element x to the back of queue.<br>pop() – Removes the element from in front of queue.<br>peek() – Get the front element.<br>empty() – Return whether the queue is empty.<br>Notes:<br>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.<br>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.<br>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<h4 id="用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了"><a href="#用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了" class="headerlink" title="用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了"></a>用两个栈模拟，将数据始终塞进一个stack，pop时将数据弹出到另一个stack后再pop出来，就跟队列pop的顺序一样了</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">class MyQueue &#123;</div><div class="line"><span class="symbol">private:</span></div><div class="line">    stack&lt;int&gt; <span class="built_in">s1</span>, <span class="built_in">s2</span><span class="comment">;</span></div><div class="line"><span class="symbol">public:</span></div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    MyQueue() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Push element x to the back of queue. */</span></div><div class="line">    void push(int x) &#123;</div><div class="line">        <span class="built_in">s1</span>.push(x)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></div><div class="line">    int pop() &#123;</div><div class="line">        if (<span class="built_in">s2</span>.size() == <span class="number">0</span>) &#123;</div><div class="line">            while (<span class="built_in">s1</span>.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">s2</span>.push(<span class="built_in">s1</span>.top())<span class="comment">;</span></div><div class="line">                <span class="built_in">s1</span>.pop()<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        int front = <span class="built_in">s2</span>.top()<span class="comment">;</span></div><div class="line">        <span class="built_in">s2</span>.pop()<span class="comment">;</span></div><div class="line">        return front<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the front element. */</span></div><div class="line">    int peek() &#123;</div><div class="line">        if (<span class="built_in">s2</span>.size() == <span class="number">0</span>) &#123;</div><div class="line">            while (<span class="built_in">s1</span>.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">s2</span>.push(<span class="built_in">s1</span>.top())<span class="comment">;</span></div><div class="line">                <span class="built_in">s1</span>.pop()<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return <span class="built_in">s2</span>.top()<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></div><div class="line">    <span class="keyword">bool </span>empty() &#123;</div><div class="line">        return <span class="built_in">s1</span>.size() == <span class="number">0</span> &amp;&amp; <span class="built_in">s2</span>.size() == <span class="number">0</span><span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your MyQueue object will be instantiated and called as such:</div><div class="line"> * MyQueue obj = new MyQueue();</div><div class="line"> * obj.push(x);</div><div class="line"> * int param_2 = obj.pop();</div><div class="line"> * int param_3 = obj.peek();</div><div class="line"> * bool param_4 = obj.empty();</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement the following operations of a queue using stacks.&lt;/p&gt;
&lt;p&gt;push(x) – Push element x to the back of queue.&lt;br&gt;pop() – Removes the 
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode237. Delete Node in a Linked List</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode237-Delete-Node-in-a-Linked-List/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode237-Delete-Node-in-a-Linked-List/</id>
    <published>2017-02-15T18:47:40.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void deleteNode(ListNode* <span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">        ListNode* next = <span class="keyword">node</span><span class="title">-&gt;next</span>;</div><div class="line">        <span class="keyword">node</span><span class="title">-&gt;val</span> = next-&gt;val;</div><div class="line">        <span class="keyword">node</span><span class="title">-&gt;next</span> = next-&gt;next;</div><div class="line">        delete next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.&lt;/p&gt;
&lt;p&gt;Supposed the linked l
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode231. Power of Two</title>
    <link href="http://mingyi.js.org/2017/02/15/LeeCode231-Power-of-Two/"/>
    <id>http://mingyi.js.org/2017/02/15/LeeCode231-Power-of-Two/</id>
    <published>2017-02-15T17:42:12.000Z</published>
    <updated>2017-02-20T15:02:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer, write a function to determine if it is a power of two.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> !(n &amp; (n - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an integer, write a function to determine if it is a power of two.&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
