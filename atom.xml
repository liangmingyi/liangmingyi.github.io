<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>茗一的笔记</title>
  
  <subtitle>沉淀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mingyi.js.org/"/>
  <updated>2017-09-10T16:24:55.782Z</updated>
  <id>http://mingyi.js.org/</id>
  
  <author>
    <name>Mingyi Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何追查诡异问题</title>
    <link href="http://mingyi.js.org/2017/09/10/trouble-shooting-md/"/>
    <id>http://mingyi.js.org/2017/09/10/trouble-shooting-md/</id>
    <published>2017-09-10T22:01:07.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>这里的“问题“，主要指一个软件系统中，由于硬件故障、程序bug或人为失误而导致的系统异常。<br>“诡异问题”指的是不是那么容易追查的问题，有些问题一看就知道原因，这种问题不在本文讨论之内。<br>解决诡异问题一般会有四个步骤：</p><ol><li>分析问题</li><li>复现问题</li><li>定位问题原因</li><li>寻找解决方案</li></ol><h4 id="一、分析问题"><a href="#一、分析问题" class="headerlink" title="一、分析问题"></a>一、分析问题</h4><h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>一般来说拿到一个问题，先收集与问题相关的信息。</p><ul><li>是否有相关的业务日志、错误日志</li><li>是否有非业务日志（比如php-error, nginx error_log，系统dmsg等）</li><li>进程/线程状态是否正常（如ps、pstree、top、/proc/$pid、lsof）</li><li>网络状态是否正常（如netstat、ifconfig）</li><li>系统内存、磁盘状态是否正常（如free、df、iostat）</li><li>是否有core文件</li><li>查看程序的版本及changeLog（是否是某个版本的已知问题）</li><li>查看上下游模块是否有异常情况</li><li>……</li></ul><h5 id="现象分析"><a href="#现象分析" class="headerlink" title="现象分析"></a>现象分析</h5><p>从收集到的信息，可以看出一些不寻常的“现象”，接下来是对这些现象做一些初步分析。下面是一些比较常见的现象的分析思路。</p><ul><li>错误日志：这是最常见的一种现象了，看看具体错误信息，看看报错的是哪一行，到代码里面看具体的逻辑，分析报错的原因</li><li>请求失败：server返回了明确的错误（比如http 500， error_no -1等），这种错误一般是有错误码的，查看错误码对应的错误原因。也可以看server日志，有没有相关的错误日志。</li><li>功能异常：请求并没有明显的失败，但从用户看到的功能来看不正常，比如乱码。这种一般是请求到的数据有异常，需要深入业务逻辑，查看系统各环节的数据，看看是从哪个环节开始出现异常，可以用二分法排查。</li><li>响应超时或长耗时：对比下client日志和server日志，看是否server真正长耗时，还是中间的网络延时。如果server真的长耗时，需要查看server各阶段日志，看看哪一阶段耗时长。</li><li>连接失败：可能是server端口异常，可能是网络异常。尝试手动连接端口：nc -vzz $ip $port,分别从client和server所在的机器连接，如果在server所在机器连接不上端口，说明端口不存在。如果server能连接，client不能，可能是中间的网络问题，可以尝试ping一下。也可能是server设置了一些防火墙策略，可以尝试server上面的其它端口看能否连接。</li><li>出core：首先用gdb查看core堆栈，如果是多线程程序，除了出core的那个线程，还可以看看其它线程都在做什么。</li><li>hang死：这种情况进程是存活的，但是不工作了，可以gdb attach上去看看系统堆栈，看看hang在什么堆栈上，同样看看每个线程都在做什么。</li><li>cpu打满：这种情况下进程是存活的而且一直在使用cpu，同样可以gdb attach上去看看在做什么，还可以在gdb里面输入continue让它继续执行，一会再Ctrl+C看看在做什么。</li><li>内存泄漏：这种情况下进程工作正常但是占用的内存一直在增长。先确定是否是持续增长，有些程序随着压力的增大内存占用会增大，这是正常的，如果在压力恒定情况下，内存还一直增长，那很有可能就是内存泄漏了。</li><li>机器无法登录：可尝试ping下，如果ping不通，说明网络不通，或者ip已经不存在。如果能ping通，但是ssh超时，那可能是机器假死，比如cpu打满、内存用满之类的。如果ssh立即返回错误，那有可能是密码错误或者没权限。</li><li>……</li></ul><h5 id="因素分析"><a href="#因素分析" class="headerlink" title="因素分析"></a>因素分析</h5><p>从现象初步分析后，还可以从因素角度分析，看看问题和哪些因素有关。</p><ul><li>时间因素<ul><li>问题发生的时间有没有什么规律，比如每天高峰期容易出现，则可能与压力有关；比如每隔固定时间间隔出现，可能与定时任务有关。</li><li>问题发生的时间点，有没有什么相关事件，比如上线、重启等。</li></ul></li><li>空间因素<ul><li>问题发生的地点（机器）有什么规律，比如固定在某台机器出现，固定在某个网段出现，则可能和这些机器、机房、网段有关。</li><li>比如说固定在某台机器出现，那么可以对比下这台机器和其它机器有什么不同，比如硬件、操作系统版本、环境变量、上面部署的程序、代码、配置有什么不同。</li></ul></li><li>软件因素<ul><li>问题发生所在的软件有什么规律，比如只在某个模块出现，或者只在某个接口出现，或者只在某个参数传某个值的时候出现</li><li>那么可以对比一下这个模块/接口和其它的模块/接口有什么不同，比如是否会走到不同的业务逻辑分支</li><li>这里的软件因素可以是不同层面的，比如用户/客户端输入、配置/数据、业务代码、框架/基础库、语言/Runtime等都可以算软件层面的因素。</li></ul></li></ul><h4 id="二、复现问题"><a href="#二、复现问题" class="headerlink" title="二、复现问题"></a>二、复现问题</h4><p>按问题发生的条件，可以分为</p><ul><li>无法复现：问题只发生过一次或几次，之后再也无法出现</li><li>不稳定复现：按照某个确定的步骤操作，问题有一定概率会出现</li><li>稳定复现：按照某个确定性的步骤操作，问题必然出现<br>从定位问题的难度来看，显然是 无法复现 &gt; 不稳定复现 &gt; 稳定复现。<br>从复现的场景分，又可分为线上复现和线下复现。从定位问题的难度来看，显然是 线上复现 &gt; 线下复现。<br>由于线上是用户的真实流量，不能随意做各种实验，所以给定位问题会带来很大困难，因此我们第一步要想方设法实现线下复现，然后再想办法做到线下稳定复现。</li></ul><h5 id="线下复现"><a href="#线下复现" class="headerlink" title="线下复现"></a>线下复现</h5><p>一般来说线下复现就需要构造和线上尽量一致的条件。</p><ul><li>硬件、网络一致，这点一般比较难做到，因为线下测试机和线上机器总有各种不一样。好在硬件问题一般是比较少见的。</li><li>软件环境一致，包括操作系统、环境变量、程序、配置、数据、依赖服务（这个比较难，可以考虑采用mock方式）。</li><li>输入请求一致，可以用tcpcopy从线上拷贝真实流量，到线下回放<br>稳定复现</li></ul><p>如何把不稳定复现变成稳定复现？<br>想办法增加问题发生的概率。<br>一些常规的方法如：</p><ul><li>加大流量压力</li><li>增加请求的并发，包括调大客户端的请求并发数，以及服务端的并发数（进程/线程数）</li><li>减少服务端的并发数，这和上一条并不冲突，这是为了更快地制造请求达到处理瓶颈的条件，有些问题在请求达到瓶颈的时候更容易暴露出来</li><li>构造各种异常请求，如非法类型、超长请求、不存在的id等进行不断尝试</li><li>构造一些服务异常，如配置不存在ip、端口，故意杀死进程等<br>但是上述方法，缺乏针对性，实际操作的时候，需要根据具体问题发生的条件，来分析。比如经过前面的因素分析发现问题只出现在某个模块某个接口上，那么就专门针对这个模块这个接口进行复现，那么复现的概率会大很多。如果没能复现，那么估计是有某个因素我们尚未发现，没有去构造出这个因素。<br>当问题发生的概率够大时，比如在起压力的情况下每1分钟出一次问题，那就可以进行下一步的问题定位了。<br>无法复现的情况</li></ul><p>这是最麻烦的情况了，可能是线上一直没有再出现过，也可能是线上还出现但线下一直没能复现。而且，经过前面的现象分析和因素分析也没能得到更多有用的线索。<br>在这种情况下，可以尝试为程序增加更多详细的日志，然后等待线上再次出现，这些日志可以为我们提供进一步的线索。</p><h4 id="三、定位问题原因"><a href="#三、定位问题原因" class="headerlink" title="三、定位问题原因"></a>三、定位问题原因</h4><p>定位问题有多种方法，常见的方法是因素测试和调试。</p><h5 id="因素测试（控制变量法）"><a href="#因素测试（控制变量法）" class="headerlink" title="因素测试（控制变量法）"></a>因素测试（控制变量法）</h5><p>和前面的因素分析类似，因素测试就是人为地构造更多因素不一样的场景，来测试问题是否和某个因素有关。<br>比如说，修改程序版本，看问题是否发生。如果有的版本有问题，有的版本没问题，那就可以确定，是某些版本引入的问题。通过二分法，可以精确定位到是哪个版本引入的问题。<br>又比如说，调整server的线程数，如果线程数为1的时候没问题，线程数大于1的时候有问题，那说明是多线程带来的问题。</p><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>调试有两种方式，一种是通过打日志，把程序内部的一些信息打印出来。另一种是使用比如gdb这样的工具，设置断点然后单步进去查看各种变量的值。<br>打日志的优点是可以用于非稳定复现的情况（不是每个请求都必然出问题），日志可以一直打，积累足够多的请求到问题复现了，再回头来分析日志。缺点是需要改代码，如果是C模块这种还得重新编译，麻烦。<br>gdb这种工具调试的优点是不用改代码，缺点是一般只能用于稳定复现的情况。<br>工具分析</p><p>有很多工具可以用于分析问题，比如valgrind可用于检测内存非法使用和内存泄漏，gperftool可以用于检测cpu性能瓶颈和内存泄漏，strace可用于追踪系统调用的情况。关于工具的使用可以详见这里。</p><h4 id="四、寻找解决方案"><a href="#四、寻找解决方案" class="headerlink" title="四、寻找解决方案"></a>四、寻找解决方案</h4><p>原因都定位出来了，解决方案就不成问题了：）<br>一般来说，应该解决根本原因（比如某个程序bug，那就修复这个bug）。</p><p>但是有时候，解决根本原因的成本较高（比如要修改第三方开源库），而线上问题又比较紧急，这时可以先考虑从上层去规避。前面通过因素分析、因素测试可以找出影响问题的一些因素，那么可以通过修改因素来规避。（比如发现在某些机器上有问题，其它机器没问题，可以先把有问题的机器摘除）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;这里的“问题“，主要指一个软件系统中，由于硬件故障、程序bug或人为失误而导致的系统异常。&lt;br&gt;“诡异问题”指的是不是那么容易追查的问题，
      
    
    </summary>
    
    
      <category term="项目总结" scheme="http://mingyi.js.org/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode28. Implement strStr()</title>
    <link href="http://mingyi.js.org/2017/03/12/LeetCode28-Implement-strStr/"/>
    <id>http://mingyi.js.org/2017/03/12/LeetCode28-Implement-strStr/</id>
    <published>2017-03-12T12:28:40.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Implement strStr().</p><p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p>简单的做法双重循环，依次去比较，时间复杂度O(m*n)，也可以用KMP</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len1 = haystack.length(), len2 = needle.length();</div><div class="line">        <span class="keyword">if</span> (len2 &gt; len1) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span> &amp;&amp; len2 == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1 - len2 + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (; j &lt; len2; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j])</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (j == len2)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>翻出算法导论，复习了下KMP，无论理解还是写起来都还是比较费劲的（只见过一位清华学霸徒手写完整过），网上的解读资料也是非常多的，有一篇写的比较好的，<a href="http://www.matrix67.com/blog/archives/115" target="_blank" rel="external">KMP算法详解</a>  最优时间复杂度O(n)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; failure;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetFailureFunction</span><span class="params">(<span class="built_in">string</span>&amp; needle)</span></span>&#123;</div><div class="line"></div><div class="line">        failure.assign(needle.size(), <span class="number">-1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; needle.size(); j++)&#123;</div><div class="line">            <span class="keyword">int</span> i = failure[j<span class="number">-1</span>];</div><div class="line"></div><div class="line">            <span class="keyword">while</span>( (needle[j] != needle[i+<span class="number">1</span>]) &amp;&amp; (i&gt;=<span class="number">0</span>) )&#123;</div><div class="line">                i = failure[i];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(needle[j] == needle[i+<span class="number">1</span>])&#123;</div><div class="line">                failure[j] = i+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="built_in">string</span>&amp; haystack, <span class="built_in">string</span>&amp; needle)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>( i&lt;haystack.size() &amp;&amp; j&lt;needle.size() )&#123;</div><div class="line">            <span class="keyword">if</span>( haystack[i] == needle[j] )&#123;</div><div class="line">                i++; j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>( j == <span class="number">0</span> )</div><div class="line">                    i++;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    j = failure[j<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(j &lt; needle.size())</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> i-needle.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line"></div><div class="line">        GetFailureFunction(needle);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> KMP(haystack,needle);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Implement strStr().&lt;/p&gt;
&lt;p&gt;Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode24. Swap Nodes in Pairs</title>
    <link href="http://mingyi.js.org/2017/03/10/LeetCode24-Swap-Nodes-in-Pairs/"/>
    <id>http://mingyi.js.org/2017/03/10/LeetCode24-Swap-Nodes-in-Pairs/</id>
    <published>2017-03-10T10:52:43.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>For example,<br>Given <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.</p><p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p><p>链表的操作</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for singly-linked list.</span></div><div class="line"><span class="comment"> * struct ListNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     ListNode *next;</span></div><div class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></div><div class="line"><span class="comment"> * &#125;;</span></div><div class="line"><span class="comment"> */</span></div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* swapPairs(ListNode* head) &#123;</div><div class="line">        <span class="function"><span class="title">if</span> (head == nullptr || head-&gt;</span>next == nullptr)</div><div class="line">            return head;</div><div class="line">        </div><div class="line">        <span class="comment">// 在头增加一个节点</span></div><div class="line">        ListNode pre = ListNode(-<span class="number">1</span>);</div><div class="line">        pre.next = head;</div><div class="line">        </div><div class="line">        L<span class="function"><span class="title">istNode</span> *t1 = &amp;pre, *t2 = t1-&gt;</span><span class="function"><span class="title">next</span>, *t3 = t2-&gt;</span><span class="function"><span class="title">next</span>, *t4 = t3-&gt;</span>next;</div><div class="line">        <span class="keyword">while</span> (t3 != nullptr) &#123;</div><div class="line">            <span class="function"><span class="title">t1</span>-&gt;</span>next = t3;</div><div class="line">            <span class="function"><span class="title">t3</span>-&gt;</span>next = t2;</div><div class="line">            <span class="function"><span class="title">t2</span>-&gt;</span>next = t4;</div><div class="line">            </div><div class="line">            t1 = t2;</div><div class="line">            t2 = t4;</div><div class="line">            <span class="function"><span class="title">t3</span> = t2 ? t2-&gt;</span>next : nullptr;</div><div class="line">            <span class="function"><span class="title">t4</span> = t3 ? t3-&gt;</span>next : nullptr;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return pre.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/code&gt;, yo
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode70. Climbing Stairs</title>
    <link href="http://mingyi.js.org/2017/03/05/LeetCode70-Climbing-Stairs/"/>
    <id>http://mingyi.js.org/2017/03/05/LeetCode70-Climbing-Stairs/</id>
    <published>2017-03-05T22:20:32.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p>Note: Given n will be a positive integer.</p><h4 id="排列组合问题，可用递归求解；但递归会消耗系统栈空间，在leetcode上提交的时候-在n-44的这个case时，内存会爆。所以还需要对尾递归优化，用循环代替"><a href="#排列组合问题，可用递归求解；但递归会消耗系统栈空间，在leetcode上提交的时候-在n-44的这个case时，内存会爆。所以还需要对尾递归优化，用循环代替" class="headerlink" title="排列组合问题，可用递归求解；但递归会消耗系统栈空间，在leetcode上提交的时候 在n=44的这个case时，内存会爆。所以还需要对尾递归优化，用循环代替~"></a>排列组合问题，可用递归求解；但递归会消耗系统栈空间，在leetcode上提交的时候 在n=44的这个case时，内存会爆。所以还需要对尾递归优化，用循环代替~</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span> || n == <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> n;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="优化后"><a href="#优化后" class="headerlink" title="优化后:"></a>优化后:</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Solution</span> &#123;</div><div class="line">public:</div><div class="line">    <span class="built_in">int</span> climbStairs(<span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span> || n == <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> n;</div><div class="line">        </div><div class="line">        <span class="built_in">int</span> <span class="literal">result</span>[n];</div><div class="line">        <span class="literal">result</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="literal">result</span>[<span class="number">1</span>] = <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt; n; i++)</div><div class="line">            <span class="literal">result</span>[i] = <span class="literal">result</span>[i - <span class="number">1</span>] + <span class="literal">result</span>[i - <span class="number">2</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>[n - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You are climbing a stair case. It takes n steps to reach to the top.&lt;/p&gt;
&lt;p&gt;Each time you can either climb 1 or 2 steps. In how many dist
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode67. Add Binary</title>
    <link href="http://mingyi.js.org/2017/03/02/LeetCode67-Add-Binary/"/>
    <id>http://mingyi.js.org/2017/03/02/LeetCode67-Add-Binary/</id>
    <published>2017-03-02T17:09:22.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given two binary strings, return their sum (also a binary string).</p><p>For example,<br>a = <code>&quot;11&quot;</code><br>b = <code>&quot;1&quot;</code><br>Return <code>&quot;100&quot;</code>.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    string addBinary(string a, string b)</div><div class="line">    &#123;</div><div class="line">        string result = <span class="string">""</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>, i = a.length() - <span class="number">1</span>, j = b.length() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || <span class="keyword">sum</span> == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">sum</span> += i &gt;= <span class="number">0</span> ? a[i --] - <span class="string">'0'</span> : <span class="number">0</span>;</div><div class="line">            <span class="keyword">sum</span> += j &gt;= <span class="number">0</span> ? b[j --] - <span class="string">'0'</span> : <span class="number">0</span>;</div><div class="line">            result = <span class="keyword">char</span>(<span class="keyword">sum</span> % <span class="number">2</span> + <span class="string">'0'</span>) + result;</div><div class="line">            <span class="keyword">sum</span> /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given two binary strings, return their sum (also a binary string).&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;a = &lt;code&gt;&amp;quot;11&amp;quot;&lt;/code&gt;&lt;br&gt;b = &lt;code&gt;&amp;q
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode39. Combination Sum</title>
    <link href="http://mingyi.js.org/2017/02/25/LeetCode39-Combination-Sum/"/>
    <id>http://mingyi.js.org/2017/02/25/LeetCode39-Combination-Sum/</id>
    <published>2017-02-25T23:48:50.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p><p>The same repeated number may be chosen from C unlimited number of times.</p><p>Note:<br>All numbers (including target) will be positive integers.<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set <code>[2, 3, 6, 7]</code> and target 7,<br>A solution set is: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">7</span>],</div><div class="line">  [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="跟LeetCode22-Generate-Parentheses类似，递归"><a href="#跟LeetCode22-Generate-Parentheses类似，递归" class="headerlink" title="跟LeetCode22. Generate Parentheses类似，递归"></a>跟<a href="http://mingyi.js.org/2017/02/24/LeetCode22-Generate-Parentheses/">LeetCode22. Generate Parentheses</a>类似，递归</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combinationSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        sort(candidates.begin(), candidates.end());</div><div class="line">        </div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        DFS(candidates, target, <span class="number">0</span>, path, result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> start, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; path, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</div><div class="line">            result.push_back(path);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len = candidates.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (target &lt; candidates[i]) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            path.push_back(candidates[i]);</div><div class="line">            DFS(candidates, target - candidates[i], i, path, result);</div><div class="line">            path.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate 
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode22. Generate Parentheses</title>
    <link href="http://mingyi.js.org/2017/02/24/LeetCode22-Generate-Parentheses/"/>
    <id>http://mingyi.js.org/2017/02/24/LeetCode22-Generate-Parentheses/</id>
    <published>2017-02-24T23:30:18.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given n = 3, a solution set is:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  <span class="string">"((()))"</span>,</div><div class="line">  <span class="string">"(()())"</span>,</div><div class="line">  <span class="string">"(())()"</span>,</div><div class="line">  <span class="string">"()(())"</span>,</div><div class="line">  <span class="string">"()()()"</span></div><div class="line">]</div></pre></td></tr></table></figure><h4 id="递归来拼字符串；左括号的数量小于n时，可继续添加左括号；右括号的数量小于左括号时，可添加右括号"><a href="#递归来拼字符串；左括号的数量小于n时，可继续添加左括号；右括号的数量小于左括号时，可添加右括号" class="headerlink" title="递归来拼字符串；左括号的数量小于n时，可继续添加左括号；右括号的数量小于左括号时，可添加右括号"></a>递归来拼字符串；左括号的数量小于n时，可继续添加左括号；右括号的数量小于左括号时，可添加右括号</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        helper(<span class="number">0</span>, <span class="number">0</span>, n, <span class="string">""</span>, result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> n, <span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (right == n) &#123; </div><div class="line">            result.push_back(s);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</div><div class="line">            helper(left + <span class="number">1</span>, right, n, s + <span class="string">'('</span>, result);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</div><div class="line">            helper(left, right + <span class="number">1</span>, n, s + <span class="string">')'</span>, result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&lt;/p&gt;
&lt;p&gt;For example, given n = 3, 
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode20. Valid Parentheses</title>
    <link href="http://mingyi.js.org/2017/02/23/LeetCode20-Valid-Parentheses/"/>
    <id>http://mingyi.js.org/2017/02/23/LeetCode20-Valid-Parentheses/</id>
    <published>2017-02-23T00:49:35.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p><h4 id="栈的操作"><a href="#栈的操作" class="headerlink" title="栈的操作"></a>栈的操作</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; paren;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>&amp; c : s) &#123;</div><div class="line">            <span class="keyword">switch</span> (c) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'('</span>: </div><div class="line">                <span class="keyword">case</span> <span class="string">'&#123;'</span>: </div><div class="line">                <span class="keyword">case</span> <span class="string">'['</span>: paren.push(c); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">']'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: ; <span class="comment">// pass</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> paren.empty() ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;}&amp;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode19. Remove Nth Node From End of List</title>
    <link href="http://mingyi.js.org/2017/02/22/LeeCode19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://mingyi.js.org/2017/02/22/LeeCode19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2017-02-22T00:26:42.000Z</published>
    <updated>2017-09-10T16:24:55.778Z</updated>
    
    <content type="html"><![CDATA[<p>Given a linked list, remove the nth node from the end of list and return its head.</p><p>For example,<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> linked <span class="built_in">list</span>: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>, <span class="keyword">and</span> n = <span class="number">2.</span></div><div class="line"></div><div class="line"><span class="type">After</span> removing the second node from the <span class="keyword">end</span>, the linked <span class="built_in">list</span> becomes <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5.</span></div></pre></td></tr></table></figure></p><h4 id="链表的操作，对头尾进行删除时需要特殊处理，也可采用在头部再增加一个节点，就只需要对删尾节点做特殊处理"><a href="#链表的操作，对头尾进行删除时需要特殊处理，也可采用在头部再增加一个节点，就只需要对删尾节点做特殊处理" class="headerlink" title="链表的操作，对头尾进行删除时需要特殊处理，也可采用在头部再增加一个节点，就只需要对删尾节点做特殊处理"></a>链表的操作，对头尾进行删除时需要特殊处理，也可采用在头部再增加一个节点，就只需要对删尾节点做特殊处理</h4><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode *<span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) : val(x), <span class="keyword">next</span>(<span class="literal">NULL</span>) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ListNode* removeNthFromEnd(ListNode* head, <span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">len</span> = getLength(head);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">len</span> == <span class="number">0</span> || n &lt; <span class="number">1</span>)</div><div class="line">            return head;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (<span class="built_in">len</span> == n) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">len</span> == <span class="number">1</span>) &#123;</div><div class="line">                return <span class="literal">NULL</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                return head-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode* p = head;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span> - n - <span class="number">1</span>; i++) &#123;</div><div class="line">            p = p-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        ListNode* deleted = p-&gt;<span class="keyword">next</span>;</div><div class="line">        p-&gt;<span class="keyword">next</span> = (n == <span class="number">1</span> ? <span class="literal">NULL</span> : deleted-&gt;<span class="keyword">next</span>);</div><div class="line">        delete deleted;</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">int</span> getLength(ListNode* head) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">len</span> = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (head) &#123;</div><div class="line">            <span class="built_in">len</span> ++;</div><div class="line">            head = head-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        return <span class="built_in">len</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a linked list, remove the nth node from the end of list and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;&lt;figure class=&quot;highlight ocaml&quot;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode18. 4Sum</title>
    <link href="http://mingyi.js.org/2017/02/22/LeeCode18-4Sum/"/>
    <id>http://mingyi.js.org/2017/02/22/LeeCode18-4Sum/</id>
    <published>2017-02-22T00:00:23.000Z</published>
    <updated>2017-09-10T16:24:55.778Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><p>Note: The solution set must not contain duplicate quadruplets.</p><p>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">A solution <span class="keyword">set</span> <span class="keyword">is</span>:</div><div class="line">[<span class="meta"></span></div><div class="line"><span class="meta">  [-1,  0, 0, 1</span>],</div><div class="line">  [<span class="meta">-2, -1, 1, 2</span>],</div><div class="line">  [<span class="meta">-2,  0, 0, 2</span>]</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="3sum的最优解时间复杂度是O-N2-的，4sum如果建立在3sum之上，最优解的时间复杂度是O-N3-，实现代码如下"><a href="#3sum的最优解时间复杂度是O-N2-的，4sum如果建立在3sum之上，最优解的时间复杂度是O-N3-，实现代码如下" class="headerlink" title="3sum的最优解时间复杂度是O(N2)的，4sum如果建立在3sum之上，最优解的时间复杂度是O(N3)，实现代码如下"></a>3sum的最优解时间复杂度是O(N2)的，4sum如果建立在3sum之上，最优解的时间复杂度是O(N3)，实现代码如下</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">class</span> Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; <span class="literal">result</span>;</div><div class="line">        int s = nums.size();</div><div class="line">        <span class="keyword">if</span> (s &lt; <span class="number">4</span>) &#123;</div><div class="line"><span class="built_in">            return</span> <span class="literal">result</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s == <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (accumulate(nums.begin(), nums.<span class="keyword">end</span>(), <span class="number">0</span>) == target) &#123;</div><div class="line">                <span class="literal">result</span>.push_back(nums);</div><div class="line">            &#125;</div><div class="line"><span class="built_in">            return</span> <span class="literal">result</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        sort(nums.begin(), nums.<span class="keyword">end</span>());</div><div class="line">        </div><div class="line">        int <span class="keyword">first</span> = <span class="number">0</span>, <span class="keyword">second</span> = <span class="number">0</span>, <span class="keyword">third</span> = <span class="keyword">second</span> + <span class="number">1</span>, <span class="keyword">fourth</span> = s - <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">first</span> = <span class="number">0</span>; <span class="keyword">first</span> &lt; s - <span class="number">3</span>; <span class="keyword">first</span> ++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">second</span> = <span class="keyword">first</span> + <span class="number">1</span>; <span class="keyword">second</span> &lt; s - <span class="number">2</span>; <span class="keyword">second</span> ++) &#123;</div><div class="line">                <span class="keyword">third</span> = <span class="keyword">second</span> + <span class="number">1</span>;</div><div class="line">                <span class="keyword">fourth</span> = s - <span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">third</span> &lt; <span class="keyword">fourth</span>) &#123;</div><div class="line">                    int tmpSum = nums[<span class="keyword">first</span>] + nums[<span class="keyword">second</span>] + nums[<span class="keyword">third</span>] + nums[<span class="keyword">fourth</span>];</div><div class="line">                    <span class="keyword">if</span> (tmpSum == target) &#123;</div><div class="line">                        vector&lt;int&gt; tmp;</div><div class="line">                        tmp.push_back(nums[<span class="keyword">first</span>]);</div><div class="line">                        tmp.push_back(nums[<span class="keyword">second</span>]);</div><div class="line">                        tmp.push_back(nums[<span class="keyword">third</span>]);</div><div class="line">                        tmp.push_back(nums[<span class="keyword">fourth</span>]);</div><div class="line">                        <span class="literal">result</span>.push_back(tmp);</div><div class="line">                        </div><div class="line">                        do &#123;</div><div class="line">                            <span class="keyword">third</span> ++;</div><div class="line">                        &#125; <span class="keyword">while</span> (<span class="keyword">third</span> &lt; <span class="keyword">fourth</span> &amp;&amp; nums[<span class="keyword">third</span>] == nums[<span class="keyword">third</span> - <span class="number">1</span>]);</div><div class="line">                        do &#123;</div><div class="line">                            <span class="keyword">fourth</span> <span class="comment">--;</span></div><div class="line">                        &#125; <span class="keyword">while</span> (<span class="keyword">third</span> &lt; <span class="keyword">fourth</span> &amp;&amp; nums[<span class="keyword">fourth</span>] == nums[<span class="keyword">fourth</span> + <span class="number">1</span>]);</div><div class="line">                        </div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpSum &lt; target) &#123;</div><div class="line">                        <span class="keyword">third</span> ++;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">fourth</span> <span class="comment">--;</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">while</span> (<span class="keyword">second</span> &lt; s - <span class="number">2</span> &amp;&amp; nums[<span class="keyword">second</span>] == nums[<span class="keyword">second</span> + <span class="number">1</span>]) &#123;</div><div class="line">                    <span class="keyword">second</span> ++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">while</span> (<span class="keyword">first</span> &lt; s - <span class="number">3</span> &amp;&amp; nums[<span class="keyword">first</span>] == nums[<span class="keyword">first</span> + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">first</span> ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line"><span class="built_in">        return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in t
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode17. Letter Combinations of a Phone Number</title>
    <link href="http://mingyi.js.org/2017/02/21/LeeCode17-Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://mingyi.js.org/2017/02/21/LeeCode17-Letter-Combinations-of-a-Phone-Number/</id>
    <published>2017-02-21T00:42:28.000Z</published>
    <updated>2017-09-10T16:24:55.778Z</updated>
    
    <content type="html"><![CDATA[<p>Given a digit string, return all possible letter combinations that the number could represent.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="Alt text"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Inpu<span class="variable">t:Digit</span> <span class="built_in">string</span> <span class="string">"23"</span></div><div class="line">Outpu<span class="variable">t:</span> [<span class="string">"ad"</span>, <span class="string">"ae"</span>, <span class="string">"af"</span>, <span class="string">"bd"</span>, <span class="string">"be"</span>, <span class="string">"bf"</span>, <span class="string">"cd"</span>, <span class="string">"ce"</span>, <span class="string">"cf"</span>].</div></pre></td></tr></table></figure><h4 id="递归，第一个字符和其余字符的结果的组合为最后的结果"><a href="#递归，第一个字符和其余字符的结果的组合为最后的结果" class="headerlink" title="递归，第一个字符和其余字符的结果的组合为最后的结果"></a>递归，第一个字符和其余字符的结果的组合为最后的结果</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Solution</span> &#123;</div><div class="line">public:</div><div class="line">    vector&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</div><div class="line">        vector&lt;<span class="built_in">string</span>&gt; <span class="literal">result</span>;</div><div class="line">        <span class="built_in">int</span> len = digits.length();</div><div class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">int</span> num = digits[<span class="number">0</span>] - '<span class="number">0</span>';</div><div class="line">        <span class="built_in">string</span> val = valueOf(num);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, j = val.length(); i &lt; j; i++) &#123;</div><div class="line">                <span class="literal">result</span>.push_back(<span class="built_in">string</span>(<span class="number">1</span>, val[i]));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            vector&lt;<span class="built_in">string</span>&gt; otherResult = letterCombinations(digits.substr(<span class="number">1</span>));</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, j = val.length(); i &lt; j; i++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> l = <span class="number">0</span>, m = otherResult.size(); l &lt; m; l++) &#123;</div><div class="line">                    <span class="literal">result</span>.push_back(<span class="built_in">string</span>(<span class="number">1</span>, val[i]) + otherResult[l]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">string</span> valueOf(<span class="built_in">int</span> num) &#123;</div><div class="line">        <span class="built_in">string</span> <span class="literal">result</span>;</div><div class="line">        switch(num) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="literal">result</span> = <span class="string">"abc"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="literal">result</span> = <span class="string">"def"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="literal">result</span> = <span class="string">"ghi"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="literal">result</span> = <span class="string">"jkl"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">6</span>: <span class="literal">result</span> = <span class="string">"mno"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">7</span>: <span class="literal">result</span> = <span class="string">"pqrs"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">8</span>: <span class="literal">result</span> = <span class="string">"tuv"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">9</span>: <span class="literal">result</span> = <span class="string">"wxyz"</span>; <span class="keyword">break</span>;</div><div class="line">            default: <span class="literal">result</span> = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a digit string, return all possible letter combinations that the number could represent.&lt;/p&gt;
&lt;p&gt;A mapping of digit to letters (just
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode16. 3Sum Closest</title>
    <link href="http://mingyi.js.org/2017/02/20/LeeCode16-3Sum-Closest/"/>
    <id>http://mingyi.js.org/2017/02/20/LeeCode16-3Sum-Closest/</id>
    <published>2017-02-20T23:35:42.000Z</published>
    <updated>2017-09-10T16:24:55.778Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">For example, given<span class="built_in"> array </span>S = &#123;-1 2 1 -4&#125;,<span class="built_in"> and </span>target = 1.</div><div class="line"></div><div class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</div></pre></td></tr></table></figure><h4 id="除了O-N3-的穷举解法外，还可以通过对数组排序，假设第一个数已经确定，第二个数从左边扫，第三个数从右边扫，然后根据当前和与目标值比较的结果调整第二个或第三个数的位置，时间复杂度O-N2"><a href="#除了O-N3-的穷举解法外，还可以通过对数组排序，假设第一个数已经确定，第二个数从左边扫，第三个数从右边扫，然后根据当前和与目标值比较的结果调整第二个或第三个数的位置，时间复杂度O-N2" class="headerlink" title="除了O(N3)的穷举解法外，还可以通过对数组排序，假设第一个数已经确定，第二个数从左边扫，第三个数从右边扫，然后根据当前和与目标值比较的结果调整第二个或第三个数的位置，时间复杂度O(N2)"></a>除了O(N3)的穷举解法外，还可以通过对数组排序，假设第一个数已经确定，第二个数从左边扫，第三个数从右边扫，然后根据当前和与目标值比较的结果调整第二个或第三个数的位置，时间复杂度O(N2)</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">int</span> threeSumClosest(vector&lt;<span class="built_in">int</span>&gt;&amp; nums, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">4</span>)</div><div class="line">            <span class="keyword">return</span> accumulate(nums.begin(), nums.<span class="keyword">end</span>(), <span class="number">0</span>);</div><div class="line">        </div><div class="line">        sort(nums.begin(), nums.<span class="keyword">end</span>());</div><div class="line">        <span class="built_in">int</span> s = nums.<span class="built_in">size</span>(), result = <span class="number">10000000</span>;</div><div class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</div><div class="line">            <span class="built_in">int</span> j = i + <span class="number">1</span>;</div><div class="line">            <span class="built_in">int</span> k = s - <span class="number">1</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</div><div class="line">                <span class="built_in">int</span> tmpSum = nums[i] + nums[j] + nums[k];</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(tmpSum - <span class="keyword">target</span>) &lt; <span class="built_in">abs</span>(result - <span class="keyword">target</span>)) &#123;</div><div class="line">                    result = tmpSum;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (tmpSum &gt; <span class="keyword">target</span>) &#123;</div><div class="line">                    k--;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpSum &lt; <span class="keyword">target</span>) &#123;</div><div class="line">                    j++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    result = <span class="keyword">target</span>;</div><div class="line">                    i = s; // break <span class="keyword">out</span> iterator</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the th
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode11. Container With Most Water</title>
    <link href="http://mingyi.js.org/2017/02/20/LeeCode11-Container-With-Most-Water/"/>
    <id>http://mingyi.js.org/2017/02/20/LeeCode11-Container-With-Most-Water/</id>
    <published>2017-02-20T22:59:33.000Z</published>
    <updated>2017-09-10T16:24:55.778Z</updated>
    
    <content type="html"><![CDATA[<p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p>Note: You may not slant the container and n is at least 2.</p><h4 id="两头扫，贪心法-时间复杂度O-n"><a href="#两头扫，贪心法-时间复杂度O-n" class="headerlink" title="两头扫，贪心法 时间复杂度O(n)"></a>两头扫，贪心法 时间复杂度O(n)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    int maxArea(vector&lt;int&gt;&amp; height) &#123;</div><div class="line">        int s = height.size(), <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = s - <span class="number">1</span>, result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</div><div class="line">            int h = <span class="built_in">min</span>(height[<span class="keyword">left</span>], height[<span class="keyword">right</span>]);</div><div class="line">            result = <span class="built_in">max</span>(result, h * (<span class="keyword">right</span> - <span class="keyword">left</span>));</div><div class="line">            <span class="keyword">while</span> (height[<span class="keyword">left</span>] &lt;= h &amp;&amp; <span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123; <span class="keyword">left</span>++; &#125;</div><div class="line">            <span class="keyword">while</span> (height[<span class="keyword">right</span>] &lt;= h &amp;&amp; <span class="keyword">right</span> &gt; <span class="keyword">left</span>) &#123; <span class="keyword">right</span>--; &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that th
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode10. Regular Expression Matching</title>
    <link href="http://mingyi.js.org/2017/02/20/LeeCode10-Regular-Expression-Matching/"/>
    <id>http://mingyi.js.org/2017/02/20/LeeCode10-Regular-Expression-Matching/</id>
    <published>2017-02-20T16:18:19.000Z</published>
    <updated>2017-09-10T16:24:55.778Z</updated>
    
    <content type="html"><![CDATA[<p>Implement regular expression matching with support for ‘.’ and ‘*’.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'.'</span> Matches any single character.</div><div class="line"><span class="string">'*'</span> Matches zero or more of the preceding element.</div><div class="line"></div><div class="line">The matching should cover the entire <span class="selector-tag">input</span> string (not partial).</div><div class="line"></div><div class="line">The function prototype should be:</div><div class="line">bool isMatch(const char *s, const char *p)</div><div class="line"></div><div class="line">Some examples:</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"a"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"aa"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aaa"</span>,<span class="string">"aa"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">"a*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"ab"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>)</span></span> → true</div></pre></td></tr></table></figure></p><h4 id="如果p当前是-号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分"><a href="#如果p当前是-号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分" class="headerlink" title="如果p当前是*号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分"></a>如果p当前是*号，则可以匹配一个或多个上一个字符，否则各自往后移动一个位置，然后再递归的去判断剩余的部分</h4><h4 id="递归解法如下"><a href="#递归解法如下" class="headerlink" title="递归解法如下"></a>递归解法如下</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lens = s.length(), lenp = p.length();</div><div class="line">        <span class="keyword">if</span> (lenp == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> lens == <span class="number">0</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">if</span> (p[<span class="number">1</span>] == <span class="string">'*'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (i &lt; lens &amp;&amp; (s[i] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>)) &#123;</div><div class="line">                <span class="keyword">if</span> (isMatch(s.substr(i + <span class="number">1</span>), p.substr(<span class="number">2</span>)))</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> isMatch(s, p.substr(<span class="number">2</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> lens &gt; <span class="number">0</span> &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>) &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法"><a href="#若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法" class="headerlink" title="若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法"></a>若S的前i个字符与P的前j个字符已经匹配，则只需考察剩余的字符即可，由于具有无后效性，故也可采用动态规划解法</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dp[i][j] 表示s[<span class="number">0</span>, i<span class="number">-1</span>] 和 p[<span class="number">0</span>, j<span class="number">-1</span>]是否匹配</div><div class="line">初始解:</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = true; // 两个空字符串</div><div class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] 和 dp[<span class="number">1</span>][<span class="number">0</span>] 均是false</div><div class="line">状态转义方程：</div><div class="line">    如果p[j - <span class="number">1</span>]不是*也不是.则判断 s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</div><div class="line">    如果p[j - <span class="number">1</span>]是. 则dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</div><div class="line">    如果p[j - <span class="number">1</span>]是* 则分三种情况</div><div class="line">        <span class="number">1.</span> 匹配<span class="number">0</span>个  dp[i][j] = dp[i][j - <span class="number">2</span>]</div><div class="line">        <span class="number">2.</span> 匹配<span class="number">1</span>个  dp[i][j] = dp[i][j - <span class="number">1</span>]</div><div class="line">        <span class="number">3.</span> 匹配多个 dp[i][j] = dp[i - <span class="number">1</span>][j] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">'.'</span></div></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lens = s.length(), lenp = p.length();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(lens + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(lenp + <span class="number">1</span>, <span class="literal">false</span>));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; lenp + <span class="number">1</span>; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] != <span class="string">'.'</span> &amp;&amp; p[j - <span class="number">1</span>] != <span class="string">'*'</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'.'</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (dp[i][j - <span class="number">2</span>] || dp[i][j - <span class="number">1</span>]) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">'.'</span>)) &#123;</div><div class="line">                        dp[i][j] = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> dp[lens][lenp];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Implement regular expression matching with support for ‘.’ and ‘*’.&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode387. First Unique Character in a String</title>
    <link href="http://mingyi.js.org/2017/02/19/LeeCode387-First-Unique-Character-in-a-String/"/>
    <id>http://mingyi.js.org/2017/02/19/LeeCode387-First-Unique-Character-in-a-String/</id>
    <published>2017-02-19T20:54:24.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p><p>Examples:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"leetcode"</span></div><div class="line"><span class="keyword">return</span> <span class="number">0.</span></div><div class="line"></div><div class="line">s = <span class="string">"loveleetcode"</span>,</div><div class="line"><span class="keyword">return</span> <span class="number">2.</span></div></pre></td></tr></table></figure></p><p>Note: You may assume the string contain only lowercase letters.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">-1</span>, len = s.length();</div><div class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(<span class="number">26</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            count[s[i] - <span class="string">'a'</span>]++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (count[s[i] - <span class="string">'a'</span>] == <span class="number">1</span>) &#123;</div><div class="line">                result = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.&lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode383. Ransom Note</title>
    <link href="http://mingyi.js.org/2017/02/19/LeeCode383-Ransom-Note/"/>
    <id>http://mingyi.js.org/2017/02/19/LeeCode383-Ransom-Note/</id>
    <published>2017-02-19T20:41:59.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p><p>Each letter in the magazine string can only be used once in your ransom note.</p><p>Note:<br>You may assume that both strings contain only lowercase letters.<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">canConstruct<span class="function"><span class="params">(<span class="string">"a"</span>, <span class="string">"b"</span>)</span> -&gt;</span> <span class="literal">false</span></div><div class="line">canConstruct<span class="function"><span class="params">(<span class="string">"aa"</span>, <span class="string">"ab"</span>)</span> -&gt;</span> <span class="literal">false</span></div><div class="line">canConstruct<span class="function"><span class="params">(<span class="string">"aa"</span>, <span class="string">"aab"</span>)</span> -&gt;</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canConstruct</span><span class="params">(<span class="built_in">string</span> ransomNote, <span class="built_in">string</span> magazine)</span> </span>&#123;</div><div class="line">        <span class="keyword">bool</span> result = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = magazine.length(); i &lt; len; i++) &#123;</div><div class="line">            m[magazine[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, len = ransomNote.length(); j &lt; len; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (m[ransomNote[j]]-- == <span class="number">0</span>) &#123;</div><div class="line">                result = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return tru
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode374. Guess Number Higher or Lower</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode374-Guess-Number-Higher-or-Lower/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode374-Guess-Number-Higher-or-Lower/</id>
    <published>2017-02-18T18:08:43.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>We are playing the Guess Game. The game is as follows:</p><p>I pick a number from 1 to n. You have to guess which number I picked.</p><p>Every time you guess wrong, I’ll tell you whether the number is higher or lower.</p><p>You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="number">1</span> : <span class="type">My</span> number <span class="keyword">is</span> lower</div><div class="line"> <span class="number">1</span> : <span class="type">My</span> number <span class="keyword">is</span> higher</div><div class="line"> <span class="number">0</span> : <span class="type">Congrats</span>! You got it!</div></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">10</span>, I pick <span class="number">6.</span></div><div class="line"></div><div class="line">Return <span class="number">6.</span></div></pre></td></tr></table></figure></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// Forward declaration of guess API.</div><div class="line">// @param num, your guess</div><div class="line">// @return -<span class="number">1</span> <span class="built_in">if</span> my number is <span class="built_in">lower</span>, <span class="number">1</span> <span class="built_in">if</span> my number is higher, otherwise return <span class="number">0</span></div><div class="line"><span class="built_in">int</span> guess(<span class="built_in">int</span> num);</div><div class="line"></div><div class="line">class Solution &#123;</div><div class="line">publ<span class="symbol">ic:</span></div><div class="line">    <span class="built_in">int</span> guessNumber(<span class="built_in">int</span> <span class="built_in">n</span>) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">1</span>, <span class="built_in">right</span> = <span class="built_in">n</span>, <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>, tmp;</div><div class="line">        while (<span class="built_in">left</span> &lt;= <span class="built_in">right</span>) &#123;</div><div class="line">            <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</div><div class="line">            tmp = guess(<span class="built_in">mid</span>);</div><div class="line">            <span class="built_in">if</span> (tmp == <span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">left</span> = <span class="built_in">mid</span> + <span class="number">1</span>;</div><div class="line">            &#125; else <span class="built_in">if</span> (tmp == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">right</span> = <span class="built_in">mid</span> -<span class="number">1</span>;</div><div class="line">            &#125; else &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return <span class="built_in">mid</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We are playing the Guess Game. The game is as follows:&lt;/p&gt;
&lt;p&gt;I pick a number from 1 to n. You have to guess which number I picked.&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode371. Sum of Two Integers</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode371-Sum-of-Two-Integers/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode371-Sum-of-Two-Integers/</id>
    <published>2017-02-18T17:52:09.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.</p><p>Example:<br>Given a = 1 and b = 2, return 3.</p><h4 id="在不考虑进位的情况下-a-b，只考虑进位的情况下-a-amp-b-lt-lt-1，这两个结果相加为和的结果"><a href="#在不考虑进位的情况下-a-b，只考虑进位的情况下-a-amp-b-lt-lt-1，这两个结果相加为和的结果" class="headerlink" title="在不考虑进位的情况下 a ^ b，只考虑进位的情况下 (a &amp; b) &lt;&lt; 1，这两个结果相加为和的结果"></a>在不考虑进位的情况下 a ^ b，只考虑进位的情况下 (a &amp; b) &lt;&lt; 1，这两个结果相加为和的结果</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> getSum(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">sum</span> = a ^ b;</div><div class="line">        <span class="keyword">int</span> extra = (a &amp; b) &lt;&lt; <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (extra != <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> getSum(<span class="keyword">sum</span>, extra);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">sum</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given a = 1 and b = 2,
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode367. Valid Perfect Square</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode367-Valid-Perfect-Square/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode367-Valid-Perfect-Square/</id>
    <published>2017-02-18T17:25:54.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p><p>Note: Do not use any built-in library function such as sqrt.</p><p>Example 1:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Input:</span> <span class="number">16</span></div><div class="line"><span class="attr">Returns:</span> <span class="literal">True</span></div></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Input:</span> <span class="number">14</span></div><div class="line"><span class="attr">Returns:</span> <span class="literal">False</span></div></pre></td></tr></table></figure></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">public:</div><div class="line">    <span class="built_in">bool</span> isPerfectSquare(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> tmp = mySqrt(<span class="built_in">num</span>);</div><div class="line">        <span class="keyword">return</span> tmp * tmp == <span class="built_in">num</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">int</span> mySqrt(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="built_in">num</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">int</span> l = <span class="number">0</span>, r = <span class="built_in">num</span> / <span class="number">2</span> + <span class="number">1</span>, mid = (l + r) / <span class="number">2</span>, tmp;</div><div class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</div><div class="line">            mid = (l + r) / <span class="number">2</span>;</div><div class="line">            tmp = <span class="built_in">num</span> / mid;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (tmp &gt; mid) &#123;</div><div class="line">                l = mid + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp &lt; mid) &#123;</div><div class="line">                r = mid - <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a positive integer num, write a function which returns True if num is a perfect square else False.&lt;/p&gt;
&lt;p&gt;Note: Do not use any buil
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode350. Intersection of Two Arrays II</title>
    <link href="http://mingyi.js.org/2017/02/18/LeeCode350-Intersection-of-Two-Arrays-II/"/>
    <id>http://mingyi.js.org/2017/02/18/LeeCode350-Intersection-of-Two-Arrays-II/</id>
    <published>2017-02-18T17:03:38.000Z</published>
    <updated>2017-09-10T16:24:55.782Z</updated>
    
    <content type="html"><![CDATA[<p>Given two arrays, write a function to compute their intersection.</p><p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p><p>Note:<br>Each element in the result should appear as many times as it shows in both arrays.<br>The result can be in any order.<br>Follow up:<br>What if the given array is already sorted? How would you optimize your algorithm?<br>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?<br>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersect(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : nums1)</div><div class="line">            m[item]++;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : nums2) </div><div class="line">            <span class="keyword">if</span> (m[item]-- &gt; <span class="number">0</span>) </div><div class="line">                result.push_back(item);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://mingyi.js.org/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://mingyi.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
